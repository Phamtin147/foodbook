@model foodbook.Models.SearchViewModel
@{
    ViewData["Title"] = "Tìm kiếm";
    Layout = "~/Views/Shared/_Layout.cshtml";
    
    // Serialize data for JavaScript
    var ingredientsJson = System.Text.Json.JsonSerializer.Serialize(Model.Ingredients ?? new List<string>());
    var recipeTypesJson = System.Text.Json.JsonSerializer.Serialize(Model.RecipeTypes ?? new List<string>());
}

<!-- Search Bar -->
<div class="search-bar-wrapper">
            <div class="search-input-group">
                <span class="input-group-text search-icon">
                    <i class="fas fa-search"></i>
                </span>
                <input type="text" class="form-control search-input" id="searchInput" placeholder="Tìm kiếm công thức theo tên...">
                <button class="btn search-apply-btn" id="searchBtn">
                    <i class="fas fa-filter"></i> Áp dụng
                </button>
            </div>
        </div>

        <!-- Filters -->
        <div class="filters-wrapper">
            <div class="row">
                <!-- Nguyên liệu -->
                <div class="col-md-4">
                    <div class="filter-card">
                        <h6 class="filter-title">Nguyên liệu</h6>
                        <div class="filter-content">
                            <div class="tag-search-container">
                                <div class="tag-input-wrapper">
                                    <input type="text" 
                                           class="form-control tag-search-input" 
                                           id="ingredientSearchInput" 
                                           placeholder="Gõ để tìm nguyên liệu..."
                                           data-suggestions='@Html.Raw(ingredientsJson)'>
                                    <div class="tag-suggestions" id="ingredientSuggestions"></div>
                                </div>
                            </div>
                            <div class="selected-tags" id="selectedIngredients">
                                <!-- Selected ingredients will be displayed here -->
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Phân loại -->
                <div class="col-md-4">
                    <div class="filter-card">
                        <h6 class="filter-title">Phân loại</h6>
                        <div class="filter-content">
                            <!-- Tìm kiếm theo -->
                            <h6 class="filter-subtitle">Tìm kiếm theo</h6>
                            <div class="search-type-row">
                                <div class="search-type-option" data-value="recipe" id="search_recipe_btn">
                                    <span>Công thức</span>
                                </div>
                                <div class="search-type-option" data-value="user" id="search_user_btn">
                                    <span>Người dùng</span>
                                </div>
                            </div>
                            <input type="hidden" id="searchTypeValue" value="recipe">
                            
                            <!-- Phân loại recipe types với search -->
                            <div class="tag-search-container">
                                <div class="tag-input-wrapper">
                                    <input type="text" 
                                           class="form-control tag-search-input" 
                                           id="typeSearchInput" 
                                           placeholder="Gõ để tìm phân loại..."
                                           data-suggestions='@Html.Raw(recipeTypesJson)'>
                                    <div class="tag-suggestions" id="typeSuggestions"></div>
                                </div>
                            </div>
                            <div class="selected-tags" id="selectedTypes">
                                <!-- Selected types will be displayed here -->
                            </div>
                            
                            <!-- Độ khó -->
                            <div class="difficulty-filter-section" style="margin-top: 1rem;">
                                <h6 class="filter-subtitle">Độ khó</h6>
                                <div class="difficulty-row">
                                    <div class="difficulty-option" data-value="dễ">
                                        <span>Dễ</span>
                                    </div>
                                    <div class="difficulty-option" data-value="bình thường">
                                        <span>Bình thường</span>
                                    </div>
                                    <div class="difficulty-option" data-value="khó">
                                        <span>Khó</span>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Sắp xếp -->
                <div class="col-md-4">
                    <div class="filter-card">
                        <h6 class="filter-title">Sắp xếp</h6>
                        <div class="filter-content">
                            <select class="form-select sort-select" id="sortOrderSelect">
                                <option value="asc">Tăng Dần</option>
                                <option value="desc">Giảm Dần</option>
                            </select>
                            <div class="sort-options">
                                <div class="sort-option">
                                    <input class="form-check-input sort-checkbox" type="checkbox" value="likes" id="sort_likes">
                                    <label class="form-check-label" for="sort_likes">Lượt like</label>
                                </div>
                                <div class="sort-option">
                                    <input class="form-check-input sort-checkbox" type="checkbox" value="time" id="sort_time">
                                    <label class="form-check-label" for="sort_time">Thời gian đăng</label>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Search Results -->
        <div class="results-wrapper">
            <h5 id="resultsTitle">Kết quả tìm kiếm (@Model.SearchResults.Count)</h5>
            <div class="row" id="searchResults">
                @foreach (var recipe in Model.SearchResults)
                {
                    <div class="col-md-6 col-lg-4 col-xl-3 mb-4">
                        <div class="recipe-card">
                            <div class="recipe-image-wrapper">
                                <img src="@recipe.ThumbnailImg" class="recipe-image" alt="@recipe.RecipeName">
                            </div>
                            <div class="recipe-card-body">
                                <h5 class="recipe-title">@recipe.RecipeName</h5>
                                <div class="recipe-info">
                                    <div class="recipe-likes">
                                        <i class="fas fa-thumbs-up"></i>
                                        <span>@recipe.LikesCount</span>
                                    </div>
                                    <div class="recipe-difficulty">
                                        Độ khó: <strong>@recipe.Level</strong>
                                    </div>
                                </div>
                                <div class="recipe-author">
                                    <a href="@Url.Action("Info", "Profile", new { id = recipe.UserId })">@recipe.UserName</a>
                                </div>
                                <div class="recipe-actions">
                                    <a href="@Url.Action("Detail", "Recipe", new { id = recipe.RecipeId })" class="btn-view-detail">
                                        Xem chi tiết
                                    </a>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>

    <!-- Back to Top Button -->
    <button id="backToTop" class="back-to-top-btn" title="Lên đầu trang">
        <i class="fas fa-arrow-up"></i>
    </button>

<style>
/* Search Page Styles - Match Image Exactly */

/* Search Bar */
.search-bar-wrapper {
    margin-bottom: 2rem;
    display: flex;
    justify-content: center;
}

.search-input-group {
    display: flex;
    background: white;
    border-radius: 12px;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
    overflow: hidden;
    width: 100%;
}

.search-icon {
    background-color: #e9ecef;
    border: none;
    border-right: 1px solid #dee2e6;
    color: #6c757d;
    padding: 0.75rem 1rem;
    display: flex;
    align-items: center;
}

.search-input {
    border: none;
    border-left: none;
    border-right: none;
    padding: 0.75rem 1rem;
    font-size: 1rem;
    background-color: white;
    flex: 1;
}

.search-input:focus {
    box-shadow: none;
    border-color: transparent;
    outline: none;
}

.search-apply-btn {
    background-color: #1dd75b;
    border: none;
    color: white;
    padding: 0.75rem 1.5rem;
    font-weight: 500;
    transition: all 0.2s ease;
    display: flex;
    align-items: center;
    gap: 0.5rem;
}

.search-apply-btn:hover {
    background-color: #16a34a;
    color: white;
}

/* Filters */
.filters-wrapper {
    margin-bottom: 2rem;
}

.filter-card {
    background: white;
    border-radius: 12px;
    padding: 1.5rem;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
    height: 100%;
}

.filter-title {
    font-weight: 600;
    color: #333;
    margin-bottom: 1rem;
    font-size: 1.1rem;
}

.filter-content {
    display: flex;
    flex-direction: column;
    gap: 0.75rem;
}

/* Nguyên liệu Section */
.filter-item {
    display: flex;
    align-items: center;
    gap: 0.75rem;
}

.filter-item .form-check-input {
    margin: 0;
    width: 18px;
    height: 18px;
    border: 2px solid #dee2e6;
    border-radius: 4px;
}

.filter-item .form-check-input:checked {
    background-color: #1dd75b;
    border-color: #1dd75b;
}

.filter-item .form-check-label {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    color: #333;
    font-weight: 500;
    cursor: pointer;
    margin: 0;
}

/* Phân loại Section */
.filter-content .filter-tag {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    margin-bottom: 0.5rem;
}

.filter-content .filter-tag .form-check-input {
    margin: 0;
    width: 18px;
    height: 18px;
    border: 2px solid #dee2e6;
    border-radius: 4px;
}

.filter-content .filter-tag .form-check-input:checked {
    background-color: #1dd75b;
    border-color: #1dd75b;
}

.filter-content .filter-tag .form-check-label {
    display: flex;
    align-items: center;
    color: #333;
    font-weight: 500;
    cursor: pointer;
    margin: 0;
}

/* Sắp xếp Section */
.sort-select {
    border: 1px solid #dee2e6;
    border-radius: 8px;
    padding: 0.5rem 1rem;
    font-size: 0.9rem;
    margin-bottom: 1rem;
    background-color: white;
    width: 100%;
}

.sort-options {
    display: block !important;
    margin-top: 1rem;
    width: 100%;
}

.sort-option {
    display: block !important;
    margin-bottom: 0.75rem;
    width: 100%;
}

.sort-checkbox {
    width: 16px;
    height: 16px;
    margin-right: 8px;
    border: 1px solid #ccc;
    border-radius: 2px;
}

.sort-checkbox:checked {
    background-color: #1dd75b;
    border-color: #1dd75b;
}

.sort-label {
    font-size: 14px;
    color: #333;
    margin: 0;
}

/* Results */
.results-wrapper {
    margin-top: 2rem;
}

.results-wrapper h5 {
    font-weight: 600;
    color: #333;
    margin-bottom: 1.5rem;
}

/* Recipe Card Styles - Match Image */
.recipe-card {
    background: white;
    border-radius: 12px;
    overflow: hidden;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
    transition: all 0.3s ease;
    height: 100%;
    display: flex;
    flex-direction: column;
}

.recipe-card:hover {
    box-shadow: 0 4px 16px rgba(0, 0, 0, 0.15);
    transform: translateY(-2px);
}

.recipe-image-wrapper {
    width: 100%;
    height: 220px;
    overflow: hidden;
    background-color: #f8f9fa;
    position: relative;
}

.recipe-image {
    width: 100%;
    height: 100%;
    object-fit: cover;
    transition: transform 0.3s ease;
}

.recipe-card:hover .recipe-image {
    transform: scale(1.05);
}

.recipe-card-body {
    padding: 1.25rem;
    display: flex;
    flex-direction: column;
    gap: 0.75rem;
    flex: 1;
}

.recipe-title {
    font-size: 1.1rem;
    font-weight: 600;
    color: #2c3e50;
    margin: 0;
    line-height: 1.4;
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
    text-overflow: ellipsis;
}

.recipe-info {
    display: flex;
    justify-content: space-between;
    align-items: center;
    font-size: 0.9rem;
    color: #6c757d;
}

.recipe-likes {
    display: flex;
    align-items: center;
    gap: 0.4rem;
    color: #3498db;
    font-weight: 500;
}

.recipe-likes i {
    font-size: 1rem;
}

.recipe-difficulty {
    color: #6c757d;
    font-size: 0.9rem;
}

.recipe-difficulty strong {
    color: #2c3e50;
}

.recipe-author {
    font-size: 0.9rem;
    color: #16a34a;
    font-weight: 500;
}

.recipe-author a {
    color: #16a34a;
    text-decoration: none;
    transition: color 0.2s ease;
}

.recipe-author a:hover {
    color: #15803d;
    text-decoration: underline;
}

.recipe-actions {
    margin-top: auto;
    padding-top: 0.75rem;
}

.btn-view-detail {
    display: block;
    width: 100%;
    text-align: center;
    padding: 0.65rem 1rem;
    background-color: #f8f9fa;
    color: #2c3e50;
    text-decoration: none;
    border-radius: 8px;
    font-weight: 500;
    font-size: 0.95rem;
    border: 1px solid #dee2e6;
    transition: all 0.2s ease;
}

.btn-view-detail:hover {
    background-color: #e9ecef;
    border-color: #ced4da;
    color: #1a252f;
    transform: translateY(-1px);
}

/* User Card Styles */
.user-card {
    background: white;
    border-radius: 12px;
    overflow: hidden;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
    transition: all 0.3s ease;
    height: 100%;
    display: flex;
    flex-direction: column;
}

.user-card:hover {
    box-shadow: 0 4px 16px rgba(0, 0, 0, 0.15);
    transform: translateY(-2px);
}

.user-card-header {
    padding: 2rem;
    text-align: center;
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
}

.user-avatar {
    width: 120px;
    height: 120px;
    border-radius: 50%;
    object-fit: cover;
    border: 4px solid white;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
}

.user-card-body {
    padding: 1.5rem;
    display: flex;
    flex-direction: column;
    gap: 0.75rem;
    flex: 1;
    text-align: center;
}

.user-fullname {
    font-size: 1.3rem;
    font-weight: 600;
    color: #2c3e50;
    margin: 0;
}

.user-username {
    font-size: 0.95rem;
    color: #6c757d;
    margin: 0;
    font-weight: 500;
}

.user-bio {
    font-size: 0.9rem;
    color: #495057;
    line-height: 1.5;
    margin: 0.5rem 0;
    min-height: 40px;
}

.user-stats {
    display: flex;
    justify-content: space-around;
    gap: 1rem;
    margin: 1rem 0;
    padding: 1rem 0;
    border-top: 1px solid #e9ecef;
    border-bottom: 1px solid #e9ecef;
}

.user-stat {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 0.3rem;
    font-size: 0.85rem;
    color: #6c757d;
}

.user-stat i {
    font-size: 1.2rem;
    color: #667eea;
}

.user-stat strong {
    color: #2c3e50;
}

.user-actions {
    margin-top: auto;
}

.btn-view-profile {
    display: block;
    width: 100%;
    text-align: center;
    padding: 0.75rem 1rem;
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
    text-decoration: none;
    border-radius: 8px;
    font-weight: 500;
    font-size: 0.95rem;
    border: none;
    transition: all 0.2s ease;
}

.btn-view-profile:hover {
    transform: translateY(-1px);
    box-shadow: 0 4px 12px rgba(102, 126, 234, 0.4);
    color: white;
}

/* Responsive */
@@media (max-width: 768px) {
    .search-page-wrapper {
        padding: 1rem 0.5rem;
    }
    
    .filter-card {
        padding: 1rem;
        margin-bottom: 1rem;
    }
    
    .search-input-group {
        margin: 0 0.5rem;
    }
}

/* Grid layout for filter content */
.filter-content {
    display: flex;
    flex-direction: column;
    gap: 0.75rem;
}

/* Nguyên liệu specific grid */
.filter-card:nth-child(1) .filter-content {
    display: flex;
    flex-direction: column;
    gap: 0.75rem;
}

/* Phân loại specific grid */
.filter-card:nth-child(2) .filter-content {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
}

/* Tìm kiếm theo - mỗi option là 1 ô riêng */
.search-type-option {
    background-color: #f8f9fa;
    border: 1px solid #dee2e6;
    border-radius: 8px;
    padding: 0.75rem 1rem;
    margin-bottom: 0.5rem;
    transition: all 0.3s ease;
}

.search-type-option:hover {
    background-color: #e9ecef;
}

.search-type-filter {
    margin: 0;
    width: 16px;
    height: 16px;
    border: 2px solid #6c757d;
    border-radius: 50%;
}

.search-type-filter:checked {
    background-color: #6c757d;
    border-color: #6c757d;
}

.search-type-filter + .form-check-label {
    font-weight: 500;
    color: #333;
    margin-left: 8px;
}

.search-type-filter:checked + .form-check-label {
    color: #333;
    font-weight: 600;
}

/* Filter Subtitle */
.filter-subtitle {
    font-size: 0.95rem;
    font-weight: 600;
    color: #495057;
    margin-bottom: 0.75rem;
    margin-top: 0.5rem;
}

/* Search Type Row - Horizontal Layout */
.search-type-row {
    display: flex;
    gap: 0.5rem;
    margin-bottom: 1rem;
}

.search-type-option {
    flex: 1;
    background-color: #f8f9fa;
    border: 2px solid #dee2e6;
    border-radius: 8px;
    padding: 0.75rem 1rem;
    display: flex;
    align-items: center;
    justify-content: center;
    text-align: center;
    cursor: pointer;
    transition: all 0.3s ease;
    font-weight: 500;
    color: #333;
}

.search-type-option span {
    display: block;
    width: 100%;
}

.search-type-option:hover {
    background-color: #e9ecef;
    border-color: #adb5bd;
}

.search-type-option.active {
    background-color: #d4edda;
    border-color: #28a745;
    color: #155724;
    font-weight: 600;
}

/* Difficulty Row - Horizontal Layout */
.difficulty-row {
    display: flex;
    gap: 0.5rem;
}

.difficulty-option {
    flex: 1;
    background-color: #f8f9fa;
    border: 2px solid #dee2e6;
    border-radius: 8px;
    padding: 0.75rem 1rem;
    display: flex;
    align-items: center;
    justify-content: center;
    text-align: center;
    cursor: pointer;
    transition: all 0.3s ease;
    font-weight: 500;
    color: #333;
    align-content:center;
}

.difficulty-option span {
    display: block;
    width: 100%;
}

.difficulty-option:hover {
    background-color: #e9ecef;
    border-color: #adb5bd;
}

.difficulty-option.active {
    background-color: #d4edda;
    border-color: #28a745;
    color: #155724;
    font-weight: 600;
}

@@media (max-width: 576px) {
    .filter-card:nth-child(1) .filter-content {
        grid-template-columns: 1fr;
    }
}

/* Tag Search Styles - Rule34 Video Style */
.tag-search-container {
    width: 100%;
}

.tag-input-wrapper {
    position: relative;
    width: 100%;
    border: 2px solid #e1e5e9;
    border-radius: 8px;
    background: white;
    transition: all 0.3s ease;
}

.tag-input-wrapper:focus-within {
    border-color: #1dd75b;
    box-shadow: 0 0 0 3px rgba(29, 215, 91, 0.1);
}

.tag-search-input {
    border: none;
    outline: none;
    width: 100%;
    padding: 10px 12px;
    font-size: 14px;
    background: transparent;
    border-radius: 8px;
}

.tag-search-input::placeholder {
    color: #6c757d;
    font-style: italic;
}

.tag-suggestions {
    position: absolute;
    top: 100%;
    left: 0;
    right: 0;
    background: white;
    border: 1px solid #e1e5e9;
    border-top: none;
    border-radius: 0 0 8px 8px;
    max-height: 200px;
    overflow-y: auto;
    z-index: 1000;
    display: none;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
}

.suggestion-item {
    padding: 8px 12px;
    cursor: pointer;
    border-bottom: 1px solid #f8f9fa;
    transition: all 0.2s ease;
    font-size: 14px;
    color: #333;
}

.suggestion-item:hover {
    background-color: #f8f9fa;
    color: #1dd75b;
}

.suggestion-item:last-child {
    border-bottom: none;
}

/* Selected Tags - Simple Gray Style */
.selected-tags {
    display: flex;
    flex-wrap: wrap;
    gap: 8px;
    margin-top: 12px;
    min-height: 0;
}

.selected-tag {
    background: #e5e7eb;
    color: #374151;
    padding: 4px 8px;
    border-radius: 16px;
    font-size: 12px;
    font-weight: 500;
    display: inline-flex;
    align-items: center;
    gap: 6px;
    box-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);
    transition: all 0.2s ease;
    animation: tagAppear 0.3s ease;
    margin-right: 4px;
    margin-bottom: 2px;
    white-space: nowrap;
}

.selected-tag:hover {
    background: #d1d5db;
    transform: translateY(-1px);
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.15);
}

.selected-tag .remove-btn {
    background: none;
    border: none;
    color: #6b7280;
    cursor: pointer;
    padding: 0;
    font-size: 14px;
    line-height: 1;
    width: 16px;
    height: 16px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: all 0.2s ease;
}

.selected-tag .remove-btn:hover {
    background-color: rgba(0, 0, 0, 0.1);
    color: #ef4444;
}

@@keyframes tagAppear {
    from {
        opacity: 0;
        transform: scale(0.8);
    }
    to {
        opacity: 1;
        transform: scale(1);
    }
}

/* Back to Top Button */
.back-to-top-btn {
    position: fixed;
    bottom: 30px;
    right: 30px;
    width: 50px;
    height: 50px;
    background-color: #1dd75b;
    color: white;
    border: none;
    border-radius: 50%;
    cursor: pointer;
    display: none;
    align-items: center;
    justify-content: center;
    font-size: 1.2rem;
    box-shadow: 0 4px 12px rgba(29, 215, 91, 0.3);
    transition: all 0.3s ease;
    z-index: 1000;
}

.back-to-top-btn:hover {
    background-color: #16a34a;
    transform: translateY(-2px);
    box-shadow: 0 6px 16px rgba(29, 215, 91, 0.4);
}

.back-to-top-btn.show {
    display: flex;
}
</style>

<script>
// Global variables
let selectedIngredients = [];
let selectedTypes = [];

// Initialize search functionality
document.addEventListener('DOMContentLoaded', function() {
    initializeIngredientSearch();
    initializeTypeSearch();
    initializeBackToTop();
    initializeDifficultyFilter();
    initializeSearchTypeFilter();
    initializeUrlParameters();
    
    // Add event listener for search button
    const searchBtn = document.getElementById('searchBtn');
    if (searchBtn) {
        searchBtn.addEventListener('click', performSearch);
    }
    
    // Add sort change handlers
    const sortOrder = document.getElementById('sortOrderSelect');
    const sortCheckboxes = document.querySelectorAll('.sort-checkbox');
    
    if (sortOrder) {
        sortOrder.addEventListener('change', performSearch);
    }
    
    sortCheckboxes.forEach(checkbox => {
        checkbox.addEventListener('change', function() {
            // Uncheck other checkboxes (only one sort criteria at a time)
            sortCheckboxes.forEach(cb => {
                if (cb !== this) cb.checked = false;
            });
            performSearch();
        });
    });
});

function performSearch() {
    console.log('=== PERFORM SEARCH START ===');
    console.log('Global selectedIngredients:', selectedIngredients);
    console.log('Global selectedTypes:', selectedTypes);
    
    const searchTerm = document.getElementById('searchInput').value;
    const searchType = document.getElementById('searchTypeValue').value || 'recipe';
    const sortType = document.querySelector('.sort-checkbox:checked')?.value || 'time';
    const sortOrder = document.getElementById('sortOrderSelect').value;
    const sortBy = sortType + '_' + sortOrder;
    
    // Get selected difficulties
    const selectedDifficulties = Array.from(document.querySelectorAll('.difficulty-option.active'))
        .map(option => option.getAttribute('data-value'));

    const requestData = {
        searchTerm: searchTerm,
        selectedIngredients: selectedIngredients,
        selectedTypes: selectedTypes,
        selectedDifficulties: selectedDifficulties,
        searchType: searchType,
        sortBy: sortBy
    };

    console.log('Request data:', requestData);

    // Choose endpoint based on search type
    const endpoint = searchType === 'user' 
        ? '@Url.Action("SearchUsers", "Search")'
        : '@Url.Action("Search", "Search")';

    fetch(endpoint, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify(requestData)
    })
    .then(response => {
        console.log('Response status:', response.status);
        return response.json();
    })
    .then(data => {
        console.log('Response data:', data);
        if (data.success) {
            console.log('Updating search results with', data.results.length, 'items');
            if (data.searchType === 'user') {
                updateUserSearchResults(data.results);
            } else {
                updateSearchResults(data.results);
            }
        } else {
            showAlert('danger', data.message);
        }
    })
    .catch(error => {
        console.error('Error:', error);
        showAlert('danger', 'Có lỗi xảy ra khi tìm kiếm');
    });
}

function updateSearchResults(results) {
    const resultsContainer = document.getElementById('searchResults');
    const resultsTitle = document.getElementById('resultsTitle');
    
    resultsTitle.textContent = `Kết quả tìm kiếm (${results.length})`;
    
    if (results.length === 0) {
        resultsContainer.innerHTML = `
            <div class="col-12 text-center py-5">
                <i class="fas fa-search fa-3x text-muted mb-3"></i>
                <h4 class="text-muted">Không tìm thấy kết quả</h4>
                <p class="text-muted">Hãy thử thay đổi từ khóa tìm kiếm hoặc bộ lọc.</p>
            </div>
        `;
        return;
    }

    let html = '';
    results.forEach(recipe => {
        html += `
            <div class="col-md-6 col-lg-4 col-xl-3 mb-4">
                <div class="recipe-card">
                    <div class="recipe-image-wrapper">
                        <img src="${recipe.thumbnailImg}" class="recipe-image" alt="${recipe.recipeName}">
                    </div>
                    <div class="recipe-card-body">
                        <h5 class="recipe-title">${recipe.recipeName}</h5>
                        <div class="recipe-info">
                            <div class="recipe-likes">
                                <i class="fas fa-thumbs-up"></i>
                                <span>${recipe.likesCount}</span>
                            </div>
                            <div class="recipe-difficulty">
                                Độ khó: <strong>${recipe.level}</strong>
                            </div>
                        </div>
                        <div class="recipe-author">
                            <a href="/Profile/Info?id=${recipe.userId}">${recipe.userName}</a>
                        </div>
                        <div class="recipe-actions">
                            <a href="/Recipe/Detail/${recipe.recipeId}" class="btn-view-detail">
                                Xem chi tiết
                            </a>
                        </div>
                    </div>
                </div>
            </div>
        `;
    });
    
    resultsContainer.innerHTML = html;
}

function updateUserSearchResults(results) {
    const resultsContainer = document.getElementById('searchResults');
    const resultsTitle = document.getElementById('resultsTitle');
    
    resultsTitle.textContent = `Kết quả tìm kiếm (${results.length} người dùng)`;
    
    if (results.length === 0) {
        resultsContainer.innerHTML = `
            <div class="col-12 text-center py-5">
                <i class="fas fa-user-slash fa-3x text-muted mb-3"></i>
                <h4 class="text-muted">Không tìm thấy người dùng</h4>
                <p class="text-muted">Hãy thử thay đổi từ khóa tìm kiếm.</p>
            </div>
        `;
        return;
    }

    let html = '';
    results.forEach(user => {
        const bioPreview = user.bio && user.bio.length > 80 
            ? user.bio.substring(0, 80) + '...' 
            : (user.bio || 'Chưa có giới thiệu');
        
        html += `
            <div class="col-md-6 col-lg-4 mb-4">
                <div class="user-card">
                    <div class="user-card-header">
                        <img src="${user.avatarUrl}" class="user-avatar" alt="${user.fullName}">
                    </div>
                    <div class="user-card-body">
                        <h5 class="user-fullname">${user.fullName}</h5>
                        <p class="user-username">@@${user.userName}</p>
                        <p class="user-bio">${bioPreview}</p>
                        <div class="user-stats">
                            <div class="user-stat">
                                <i class="fas fa-users"></i>
                                <span><strong>${user.followersCount}</strong> người theo dõi</span>
                            </div>
                            <div class="user-stat">
                                <i class="fas fa-book"></i>
                                <span><strong>${user.recipesCount}</strong> công thức</span>
                            </div>
                        </div>
                        <div class="user-actions">
                            <a href="/Profile/Info?id=${user.userId}" class="btn-view-profile">
                                Xem trang cá nhân
                            </a>
                        </div>
                    </div>
                </div>
            </div>
        `;
    });
    
    resultsContainer.innerHTML = html;
}

function showAlert(type, message) {
    const alertDiv = document.createElement('div');
    alertDiv.className = `alert alert-${type} alert-dismissible fade show position-fixed`;
    alertDiv.style.top = '20px';
    alertDiv.style.right = '20px';
    alertDiv.style.zIndex = '9999';
    alertDiv.innerHTML = `
        ${message}
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    `;
    document.body.appendChild(alertDiv);
    
    // Auto remove after 3 seconds
    setTimeout(() => {
        if (alertDiv.parentNode) {
            alertDiv.remove();
        }
    }, 3000);
}

// Initialize ingredient search functionality
function initializeIngredientSearch() {
    const input = document.getElementById('ingredientSearchInput');
    const suggestions = document.getElementById('ingredientSuggestions');
    
    // Debug: Log raw data
    const suggestionsData = input.getAttribute('data-suggestions');
    console.log('Raw suggestions data:', suggestionsData);
    
    let allSuggestions = [];
    try {
        allSuggestions = JSON.parse(suggestionsData || '[]');
    } catch (e) {
        console.error('Error parsing suggestions:', e);
        allSuggestions = [];
    }
    
    // Debug: Log parsed suggestions
    console.log('Parsed ingredient suggestions:', allSuggestions);
    console.log('Suggestions count:', allSuggestions.length);

    input.addEventListener('input', function() {
        const value = this.value.toLowerCase();
        if (value.length < 1) {
            suggestions.style.display = 'none';
            return;
        }

        const filtered = allSuggestions.filter(item => 
            item && item.toLowerCase().includes(value) && !selectedIngredients.includes(item)
        );

        console.log('Filtered suggestions for "' + value + '":', filtered);

        if (filtered.length > 0) {
            suggestions.innerHTML = filtered.map(item => 
                `<div class="suggestion-item" data-ingredient="${item}">${item}</div>`
            ).join('');
            suggestions.style.display = 'block';
        } else {
            suggestions.style.display = 'none';
        }
    });

    // Event delegation for suggestion clicks
    suggestions.addEventListener('click', function(e) {
        if (e.target.classList.contains('suggestion-item')) {
            const ingredient = e.target.getAttribute('data-ingredient');
            selectIngredient(ingredient);
        }
    });

    // Handle Enter key to add custom ingredient
    input.addEventListener('keypress', function(e) {
        if (e.key === 'Enter') {
            e.preventDefault();
            const value = this.value.trim();
            if (value && !selectedIngredients.includes(value)) {
                selectIngredient(value);
            }
        }
    });

    // Hide suggestions when clicking outside
    document.addEventListener('click', function(e) {
        if (!input.contains(e.target) && !suggestions.contains(e.target)) {
            suggestions.style.display = 'none';
        }
    });
}

// Initialize type search functionality
function initializeTypeSearch() {
    const input = document.getElementById('typeSearchInput');
    const suggestions = document.getElementById('typeSuggestions');
    
    // Debug: Log raw data
    const suggestionsData = input.getAttribute('data-suggestions');
    console.log('Raw type suggestions data:', suggestionsData);
    
    let allSuggestions = [];
    try {
        allSuggestions = JSON.parse(suggestionsData || '[]');
    } catch (e) {
        console.error('Error parsing type suggestions:', e);
        allSuggestions = [];
    }
    
    // Debug: Log parsed suggestions
    console.log('Parsed type suggestions:', allSuggestions);
    console.log('Type suggestions count:', allSuggestions.length);

    input.addEventListener('input', function() {
        const value = this.value.toLowerCase();
        if (value.length < 1) {
            suggestions.style.display = 'none';
            return;
        }

        const filtered = allSuggestions.filter(item => 
            item && item.toLowerCase().includes(value) && !selectedTypes.includes(item)
        );

        console.log('Filtered type suggestions for "' + value + '":', filtered);

        if (filtered.length > 0) {
            suggestions.innerHTML = filtered.map(item => 
                `<div class="suggestion-item" data-type="${item}">${item}</div>`
            ).join('');
            suggestions.style.display = 'block';
        } else {
            suggestions.style.display = 'none';
        }
    });

    // Event delegation for suggestion clicks
    suggestions.addEventListener('click', function(e) {
        if (e.target.classList.contains('suggestion-item')) {
            const type = e.target.getAttribute('data-type');
            selectType(type);
        }
    });

    // Handle Enter key to add custom type
    input.addEventListener('keypress', function(e) {
        if (e.key === 'Enter') {
            e.preventDefault();
            const value = this.value.trim();
            if (value && !selectedTypes.includes(value)) {
                selectType(value);
            }
        }
    });

    // Hide suggestions when clicking outside
    document.addEventListener('click', function(e) {
        if (!input.contains(e.target) && !suggestions.contains(e.target)) {
            suggestions.style.display = 'none';
        }
    });
}

// Select ingredient
function selectIngredient(ingredient) {
    console.log('selectIngredient called with:', ingredient);
    if (!selectedIngredients.includes(ingredient)) {
        selectedIngredients.push(ingredient);
        console.log('Updated selectedIngredients:', selectedIngredients);
        updateSelectedIngredients();
    }
    document.getElementById('ingredientSearchInput').value = '';
    document.getElementById('ingredientSuggestions').style.display = 'none';
}

// Select type
function selectType(type) {
    console.log('selectType called with:', type);
    if (!selectedTypes.includes(type)) {
        selectedTypes.push(type);
        console.log('Updated selectedTypes:', selectedTypes);
        updateSelectedTypes();
    }
    document.getElementById('typeSearchInput').value = '';
    document.getElementById('typeSuggestions').style.display = 'none';
}

// Remove ingredient
function removeIngredient(ingredient) {
    selectedIngredients = selectedIngredients.filter(item => item !== ingredient);
    updateSelectedIngredients();
}

// Remove type
function removeType(type) {
    selectedTypes = selectedTypes.filter(item => item !== type);
    updateSelectedTypes();
}

// Update selected ingredients display
function updateSelectedIngredients() {
    const container = document.getElementById('selectedIngredients');
    container.innerHTML = '';
    
    // Add tags to container (outside input)
    selectedIngredients.forEach(ingredient => {
        const tag = document.createElement('div');
        tag.className = 'selected-tag';
        tag.innerHTML = `
            ${ingredient}
            <button class="remove-btn" onclick="removeIngredient('${ingredient}')">×</button>
        `;
        container.appendChild(tag);
    });
}

// Update selected types display
function updateSelectedTypes() {
    const container = document.getElementById('selectedTypes');
    container.innerHTML = '';
    
    // Add tags to container (outside input)
    selectedTypes.forEach(type => {
        const tag = document.createElement('div');
        tag.className = 'selected-tag';
        tag.innerHTML = `
            ${type}
            <button class="remove-btn" onclick="removeType('${type}')">×</button>
        `;
        container.appendChild(tag);
    });
}

// Initialize search type filter
function initializeSearchTypeFilter() {
    const searchTypeOptions = document.querySelectorAll('.search-type-option');
    
    // Set initial active state
    document.getElementById('search_recipe_btn').classList.add('active');
    
    searchTypeOptions.forEach(option => {
        option.addEventListener('click', function() {
            // Remove active from all
            searchTypeOptions.forEach(opt => opt.classList.remove('active'));
            // Add active to clicked
            this.classList.add('active');
            // Update hidden input
            document.getElementById('searchTypeValue').value = this.getAttribute('data-value');
            // Perform search
            performSearch();
        });
    });
}

// Initialize difficulty filter
function initializeDifficultyFilter() {
    const difficultyOptions = document.querySelectorAll('.difficulty-option');
    
    difficultyOptions.forEach(option => {
        option.addEventListener('click', function() {
            // Toggle active class
            this.classList.toggle('active');
            // Perform search
            performSearch();
        });
    });
}

// Initialize URL parameters (handle filters from URL)
function initializeUrlParameters() {
    const urlParams = new URLSearchParams(window.location.search);
    let shouldSearch = false;
    
    // Check for difficulty parameter
    const difficulty = urlParams.get('difficulty');
    if (difficulty) {
        const decodedDifficulty = decodeURIComponent(difficulty);
        const difficultyOption = document.querySelector(`.difficulty-option[data-value="${decodedDifficulty}"]`);
        if (difficultyOption) {
            difficultyOption.classList.add('active');
            shouldSearch = true;
        }
    }
    
    // Check for type parameter (recipe type/category)
    const type = urlParams.get('type');
    if (type) {
        const decodedType = decodeURIComponent(type);
        // Add the type to selectedTypes
        if (!selectedTypes.includes(decodedType)) {
            selectedTypes.push(decodedType);
            updateSelectedTypes();
            shouldSearch = true;
        }
    }
    
    // Perform search if any parameter was found
    if (shouldSearch) {
        performSearch();
    }
}

// Initialize back to top button
function initializeBackToTop() {
    const backToTopBtn = document.getElementById('backToTop');
    
    // Show/hide button based on scroll position
    window.addEventListener('scroll', function() {
        if (window.pageYOffset > 300) {
            backToTopBtn.classList.add('show');
        } else {
            backToTopBtn.classList.remove('show');
        }
    });
    
    // Scroll to top when clicked
    backToTopBtn.addEventListener('click', function() {
        window.scrollTo({
            top: 0,
            behavior: 'smooth'
        });
    });
}
</script>
