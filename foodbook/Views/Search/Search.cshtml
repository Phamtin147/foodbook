@model foodbook.Models.SearchViewModel
@{
    ViewData["Title"] = "Tìm kiếm";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<!-- Search Bar -->
<div class="search-bar-wrapper">
            <div class="search-input-group">
                <span class="input-group-text search-icon">
                    <i class="fas fa-search"></i>
                </span>
                <input type="text" class="form-control search-input" id="searchInput" placeholder="Tìm kiếm công thức theo tên...">
                <button class="btn search-apply-btn" id="searchBtn">
                    <i class="fas fa-filter"></i> Áp dụng
                </button>
            </div>
        </div>

        <!-- Filters -->
        <div class="filters-wrapper">
            <div class="row">
                <!-- Nguyên liệu -->
                <div class="col-md-4">
                    <div class="filter-card">
                        <h6 class="filter-title">Nguyên liệu</h6>
                        <div class="filter-content">
                            @foreach (var ingredient in Model.Ingredients.Take(6))
                            {
                                <div class="filter-item">
                                    <input class="form-check-input ingredient-filter" type="checkbox" value="@ingredient" id="ingredient_@ingredient">
                                    <label class="form-check-label" for="ingredient_@ingredient">
                                        @ingredient
                                    </label>
                                </div>
                            }
                        </div>
                    </div>
                </div>

                <!-- Phân loại -->
                <div class="col-md-4">
                    <div class="filter-card">
                        <h6 class="filter-title">Phân loại</h6>
                        <div class="filter-content">
                            <!-- Tìm kiếm theo -->
                            <div class="search-type-option">
                                <input class="form-check-input search-type-filter" type="radio" value="user" name="searchType" id="search_user">
                                <label class="form-check-label" for="search_user">
                                    <span>Người dùng</span>
                                </label>
                            </div>
                            <div class="search-type-option">
                                <input class="form-check-input search-type-filter" type="radio" value="recipe" name="searchType" id="search_recipe" checked>
                                <label class="form-check-label" for="search_recipe">
                                    <span>Công thức</span>
                                </label>
                            </div>
                            
                            <!-- Phân loại recipe types -->
                            @foreach (var type in Model.RecipeTypes.Take(6))
                            {
                                <div class="filter-tag">
                                    <input class="form-check-input type-filter" type="checkbox" value="@type" id="type_@type">
                                    <label class="form-check-label" for="type_@type">
                                        <span>@type</span>
                                    </label>
                                </div>
                            }
                        </div>
                    </div>
                </div>

                <!-- Sắp xếp -->
                <div class="col-md-4">
                    <div class="filter-card">
                        <h6 class="filter-title">Sắp xếp</h6>
                        <div class="filter-content">
                            <select class="form-select sort-select" id="sortOrderSelect">
                                <option value="asc">Tăng Dần</option>
                                <option value="desc">Giảm Dần</option>
                            </select>
                            <div class="sort-options">
                                <div class="sort-option">
                                    <input class="form-check-input sort-checkbox" type="checkbox" value="likes" id="sort_likes">
                                    <label class="form-check-label" for="sort_likes">Lượt like</label>
                                </div>
                                <div class="sort-option">
                                    <input class="form-check-input sort-checkbox" type="checkbox" value="time" id="sort_time">
                                    <label class="form-check-label" for="sort_time">Thời gian đăng</label>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Search Results -->
        <div class="results-wrapper">
            <h5 id="resultsTitle">Kết quả tìm kiếm (@Model.SearchResults.Count)</h5>
            <div class="row" id="searchResults">
                @foreach (var recipe in Model.SearchResults)
                {
                    <div class="col-md-6 col-lg-4 col-xl-3 mb-4">
                        <div class="card h-100 shadow-sm">
                            <a href="@Url.Action("Detail", "Recipe", new { id = recipe.RecipeId })" class="text-decoration-none">
                                <img src="@recipe.ThumbnailImg" class="card-img-top" alt="@recipe.RecipeName" style="height: 200px; object-fit: cover;">
                            </a>
                            <div class="card-body d-flex flex-column">
                                <h5 class="card-title">@recipe.RecipeName</h5>
                                <div class="mt-auto">
                                    <div class="d-flex align-items-center mb-2">
                                        <i class="fas fa-thumbs-up text-primary me-1"></i>
                                        <span class="text-muted">@recipe.LikesCount</span>
                                    </div>
                                    <div class="text-muted mb-2">Độ khó: @recipe.Level</div>
                                    <div class="text-muted mb-3">@recipe.UserName</div>
                                    <a href="@Url.Action("Detail", "Recipe", new { id = recipe.RecipeId })" class="btn btn-outline-primary btn-sm w-100">
                                        <i class="fas fa-arrow-right"></i> Xem chi tiết
                                    </a>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>

<style>
/* Search Page Styles - Match Image Exactly */

/* Search Bar */
.search-bar-wrapper {
    margin-bottom: 2rem;
    display: flex;
    justify-content: center;
}

.search-input-group {
    display: flex;
    background: white;
    border-radius: 12px;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
    overflow: hidden;
    width: 100%;
}

.search-icon {
    background-color: #e9ecef;
    border: none;
    border-right: 1px solid #dee2e6;
    color: #6c757d;
    padding: 0.75rem 1rem;
    display: flex;
    align-items: center;
}

.search-input {
    border: none;
    border-left: none;
    border-right: none;
    padding: 0.75rem 1rem;
    font-size: 1rem;
    background-color: white;
    flex: 1;
}

.search-input:focus {
    box-shadow: none;
    border-color: transparent;
    outline: none;
}

.search-apply-btn {
    background-color: #1dd75b;
    border: none;
    color: white;
    padding: 0.75rem 1.5rem;
    font-weight: 500;
    transition: all 0.2s ease;
    display: flex;
    align-items: center;
    gap: 0.5rem;
}

.search-apply-btn:hover {
    background-color: #16a34a;
    color: white;
}

/* Filters */
.filters-wrapper {
    margin-bottom: 2rem;
}

.filter-card {
    background: white;
    border-radius: 12px;
    padding: 1.5rem;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
    height: 100%;
}

.filter-title {
    font-weight: 600;
    color: #333;
    margin-bottom: 1rem;
    font-size: 1.1rem;
}

.filter-content {
    display: flex;
    flex-direction: column;
    gap: 0.75rem;
}

/* Nguyên liệu Section */
.filter-item {
    display: flex;
    align-items: center;
    gap: 0.75rem;
}

.filter-item .form-check-input {
    margin: 0;
    width: 18px;
    height: 18px;
    border: 2px solid #dee2e6;
    border-radius: 4px;
}

.filter-item .form-check-input:checked {
    background-color: #1dd75b;
    border-color: #1dd75b;
}

.filter-item .form-check-label {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    color: #333;
    font-weight: 500;
    cursor: pointer;
    margin: 0;
}

/* Phân loại Section */
.filter-content .filter-tag {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    margin-bottom: 0.5rem;
}

.filter-content .filter-tag .form-check-input {
    margin: 0;
    width: 18px;
    height: 18px;
    border: 2px solid #dee2e6;
    border-radius: 4px;
}

.filter-content .filter-tag .form-check-input:checked {
    background-color: #1dd75b;
    border-color: #1dd75b;
}

.filter-content .filter-tag .form-check-label {
    display: flex;
    align-items: center;
    color: #333;
    font-weight: 500;
    cursor: pointer;
    margin: 0;
}

/* Sắp xếp Section */
.sort-select {
    border: 1px solid #dee2e6;
    border-radius: 8px;
    padding: 0.5rem 1rem;
    font-size: 0.9rem;
    margin-bottom: 1rem;
    background-color: white;
    width: 100%;
}

.sort-options {
    display: block !important;
    margin-top: 1rem;
    width: 100%;
}

.sort-option {
    display: block !important;
    margin-bottom: 0.75rem;
    width: 100%;
}

.sort-checkbox {
    width: 16px;
    height: 16px;
    margin-right: 8px;
    border: 1px solid #ccc;
    border-radius: 2px;
}

.sort-checkbox:checked {
    background-color: #1dd75b;
    border-color: #1dd75b;
}

.sort-label {
    font-size: 14px;
    color: #333;
    margin: 0;
}

/* Results */
.results-wrapper {
    margin-top: 2rem;
}

.results-wrapper h5 {
    font-weight: 600;
    color: #333;
    margin-bottom: 1.5rem;
}

.card {
    transition: transform 0.2s ease-in-out;
    border: none;
    border-radius: 16px;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
    background: white;
    overflow: hidden;
}

.card:hover {
    transform: translateY(-4px);
    box-shadow: 0 8px 24px rgba(0, 0, 0, 0.2);
}

.card-img-top {
    border-radius: 16px 16px 0 0;
    height: 200px;
    object-fit: cover;
    width: 100%;
}

.card-body {
    padding: 1.25rem;
    background: white;
}

.card-title {
    font-size: 1.1rem;
    font-weight: 600;
    color: #333;
    margin-bottom: 0.75rem;
    line-height: 1.3;
}

.card .d-flex {
    margin-bottom: 0.5rem;
}

.card .btn {
    border-radius: 8px;
    font-weight: 500;
    padding: 0.5rem 1rem;
    background-color: #f8f9fa;
    border: 1px solid #dee2e6;
    color: #333;
    transition: all 0.2s ease;
}

.card .btn:hover {
    background-color: #e9ecef;
    border-color: #adb5bd;
    color: #333;
}

/* Responsive */
@@media (max-width: 768px) {
    .search-page-wrapper {
        padding: 1rem 0.5rem;
    }
    
    .filter-card {
        padding: 1rem;
        margin-bottom: 1rem;
    }
    
    .search-input-group {
        margin: 0 0.5rem;
    }
}

/* Grid layout for filter content */
.filter-content {
    display: flex;
    flex-direction: column;
    gap: 0.75rem;
}

/* Nguyên liệu specific grid */
.filter-card:nth-child(1) .filter-content {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 0.75rem;
}

/* Phân loại specific grid */
.filter-card:nth-child(2) .filter-content {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
}

/* Tìm kiếm theo - mỗi option là 1 ô riêng */
.search-type-option {
    background-color: #f8f9fa;
    border: 1px solid #dee2e6;
    border-radius: 8px;
    padding: 0.75rem 1rem;
    margin-bottom: 0.5rem;
    transition: all 0.3s ease;
}

.search-type-option:hover {
    background-color: #e9ecef;
}

.search-type-filter {
    margin: 0;
    width: 16px;
    height: 16px;
    border: 2px solid #6c757d;
    border-radius: 50%;
}

.search-type-filter:checked {
    background-color: #6c757d;
    border-color: #6c757d;
}

.search-type-filter + .form-check-label {
    font-weight: 500;
    color: #333;
    margin-left: 8px;
}

.search-type-filter:checked + .form-check-label {
    color: #333;
    font-weight: 600;
}

/* Khi radio button được chọn, ô đó chuyển màu xanh lá */
.search-type-option:has(.search-type-filter:checked) {
    background-color: #d4edda;
    border-color: #28a745;
}

@@media (max-width: 576px) {
    .filter-card:nth-child(1) .filter-content {
        grid-template-columns: 1fr;
    }
}
</style>

<script>
document.getElementById('searchBtn').addEventListener('click', performSearch);

function performSearch() {
    const searchTerm = document.getElementById('searchInput').value;
    const selectedIngredients = Array.from(document.querySelectorAll('.ingredient-filter:checked')).map(cb => cb.value);
    const selectedTypes = Array.from(document.querySelectorAll('.type-filter:checked')).map(cb => cb.value);
    const searchType = document.querySelector('input[name="searchType"]:checked')?.value || 'recipe';
    const sortType = document.querySelector('.sort-checkbox:checked')?.value || 'time';
    const sortOrder = document.getElementById('sortOrderSelect').value;
    const sortBy = sortType + '_' + sortOrder;

    const requestData = {
        searchTerm: searchTerm,
        selectedIngredients: selectedIngredients,
        selectedTypes: selectedTypes,
        searchType: searchType,
        sortBy: sortBy
    };

    fetch('@Url.Action("Search", "Search")', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify(requestData)
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            updateSearchResults(data.results);
        } else {
            showAlert('danger', data.message);
        }
    })
    .catch(error => {
        console.error('Error:', error);
        showAlert('danger', 'Có lỗi xảy ra khi tìm kiếm');
    });
}

function updateSearchResults(results) {
    const resultsContainer = document.getElementById('searchResults');
    const resultsTitle = document.getElementById('resultsTitle');
    
    resultsTitle.textContent = `Kết quả tìm kiếm (${results.length})`;
    
    if (results.length === 0) {
        resultsContainer.innerHTML = `
            <div class="col-12 text-center py-5">
                <i class="fas fa-search fa-3x text-muted mb-3"></i>
                <h4 class="text-muted">Không tìm thấy kết quả</h4>
                <p class="text-muted">Hãy thử thay đổi từ khóa tìm kiếm hoặc bộ lọc.</p>
            </div>
        `;
        return;
    }

    let html = '';
    results.forEach(recipe => {
        html += `
            <div class="col-md-6 col-lg-4 col-xl-3 mb-4">
                <div class="card h-100 shadow-sm">
                    <a href="/Recipe/Detail/${recipe.recipeId}" class="text-decoration-none">
                        <img src="${recipe.thumbnailImg}" class="card-img-top" alt="${recipe.recipeName}" style="height: 200px; object-fit: cover;">
                    </a>
                    <div class="card-body d-flex flex-column">
                        <h5 class="card-title">${recipe.recipeName}</h5>
                        <div class="mt-auto">
                            <div class="d-flex align-items-center mb-2">
                                <i class="fas fa-thumbs-up text-primary me-1"></i>
                                <span class="text-muted">${recipe.likesCount}</span>
                            </div>
                            <div class="text-muted mb-2">Độ khó: ${recipe.level}</div>
                            <div class="text-muted mb-3">${recipe.userName}</div>
                            <a href="/Recipe/Detail/${recipe.recipeId}" class="btn btn-outline-primary btn-sm w-100">
                                <i class="fas fa-arrow-right"></i> Xem chi tiết
                            </a>
                        </div>
                    </div>
                </div>
            </div>
        `;
    });
    
    resultsContainer.innerHTML = html;
}

function showAlert(type, message) {
    const alertDiv = document.createElement('div');
    alertDiv.className = `alert alert-${type} alert-dismissible fade show position-fixed`;
    alertDiv.style.top = '20px';
    alertDiv.style.right = '20px';
    alertDiv.style.zIndex = '9999';
    alertDiv.innerHTML = `
        ${message}
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    `;
    document.body.appendChild(alertDiv);
    
    // Auto remove after 3 seconds
    setTimeout(() => {
        if (alertDiv.parentNode) {
            alertDiv.remove();
        }
    }, 3000);
}
</script>
