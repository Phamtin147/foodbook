@model List<dynamic>
@{
    ViewData["Title"] = "Quản lý người dùng";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<style>
.user-management-page {
    padding: 2rem;
    max-width: 1400px;
    margin: 0 auto;
}

.user-header {
    margin-bottom: 2rem;
}

.user-title {
    font-size: 2rem;
    font-weight: 700;
    color: #212529;
    margin-bottom: 1.5rem;
}

.user-controls {
    display: flex;
    gap: 1rem;
    align-items: center;
    flex-wrap: wrap;
}

.search-box {
    position: relative;
    flex: 1;
    min-width: 300px;
}

.search-box i {
    position: absolute;
    left: 1rem;
    top: 50%;
    transform: translateY(-50%);
    color: #6c757d;
}

.user-search-input {
    width: 100%;
    padding: 0.75rem 1rem 0.75rem 2.5rem;
    border: 1px solid #dee2e6;
    border-radius: 8px;
    font-size: 0.95rem;
    transition: all 0.2s;
}

.user-search-input:focus {
    outline: none;
    border-color: #1dd75b;
    box-shadow: 0 0 0 3px rgba(29, 215, 91, 0.1);
}

.control-actions {
    display: flex;
    gap: 0.75rem;
    align-items: center;
}

.sort-select {
    padding: 0.75rem 1rem;
    border: 1px solid #dee2e6;
    border-radius: 8px;
    font-size: 0.95rem;
    background: white;
    cursor: pointer;
    transition: all 0.2s;
}

.sort-select:focus {
    outline: none;
    border-color: #1dd75b;
}

.user-table-container {
    background: white;
    border-radius: 12px;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.08);
    overflow: hidden;
}

.user-table {
    width: 100%;
    border-collapse: collapse;
}

.user-table thead {
    background: #f8f9fa;
}

.user-table th {
    padding: 1rem 1.5rem;
    text-align: left;
    font-weight: 600;
    color: #495057;
    border-bottom: 2px solid #dee2e6;
    font-size: 0.95rem;
    text-transform: uppercase;
    letter-spacing: 0.5px;
}

.user-table tbody tr {
    border-bottom: 1px solid #f1f3f5;
    transition: all 0.2s;
}

.user-table tbody tr:hover {
    background: #f8f9fa;
}

.user-table td {
    padding: 1rem 1.5rem;
    color: #495057;
    font-size: 0.95rem;
}

.action-buttons {
    display: flex;
    gap: 0.5rem;
    flex-wrap: wrap;
}

.btn-action {
    border: none;
    padding: 0.5rem 0.75rem;
    border-radius: 6px;
    cursor: pointer;
    transition: all 0.2s;
    color: white;
    text-decoration: none;
    display: inline-flex;
    align-items: center;
    justify-content: center;
}

.btn-ban {
    background: #dc3545;
}

.btn-ban:hover {
    background: #c82333;
    transform: scale(1.05);
}

.btn-unban {
    background: #28a745;
}

.btn-unban:hover {
    background: #218838;
    transform: scale(1.05);
}

.btn-report {
    background: #17a2b8;
}

.btn-report:hover {
    background: #138496;
    transform: scale(1.05);
}

.badge {
    padding: 0.5rem 0.75rem;
    border-radius: 6px;
    font-size: 0.85rem;
    font-weight: 600;
}

.bg-success {
    background: #28a745;
    color: white;
}

.bg-danger {
    background: #dc3545;
    color: white;
}

.flag-badge {
    background: #dc3545;
    color: white;
    padding: 0.5rem 0.75rem;
    border-radius: 6px;
    font-size: 0.85rem;
    font-weight: 600;
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
}
</style>

<div class="user-management-page">
    <div class="user-header">
        <h1 class="user-title">Quản lý người dùng</h1>
        
        <div class="user-controls">
            <div class="search-box">
                <i class="fas fa-search"></i>
                <input type="text" class="user-search-input" placeholder="Tìm kiếm" id="searchInput">
            </div>

            <div class="control-actions">
                <select class="sort-select" id="sortSelect">
                    <option value="newest">Ngày đăng ký (Mới nhất)</option>
                    <option value="oldest">Ngày đăng ký (Cũ nhất)</option>
                    <option value="most_flagged">Nhiều báo cáo nhất</option>
                    <option value="least_flagged">Ít báo cáo nhất</option>
                    <option value="az">Tên A-Z</option>
                    <option value="za">Tên Z-A</option>
                        </select>
                    </div>
                </div>
            </div>

    <div class="user-table-container">
        <table class="user-table" id="userTable">
                            <thead>
                                <tr>
                                    <th>User ID</th>
                                    <th>Username</th>
                                    <th>Email</th>
                                    <th>Status</th>
                                    <th>Registered</th>
                    <th>Flags</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                @if (Model != null && Model.Any())
                {
                    foreach (var user in Model)
                    {
                        <tr data-username="@user.Username?.ToLower()" 
                            data-email="@user.Email?.ToLower()" 
                            data-date="@user.CreatedAt.ToString("yyyy-MM-dd")"
                            data-flags="@user.PendingReportCount">
                            <td>@user.UserId</td>
                            <td>@user.Username</td>
                            <td>@user.Email</td>
                            <td>
                                <span class="badge bg-@(user.Status == "active" ? "success" : "danger")">
                                    @user.Status
                                </span>
                            </td>
                            <td>@user.CreatedAt.ToString("yyyy-MM-dd")</td>
                            <td>
                                @if (user.TotalReportCount > 0)
                                {
                                    <span class="flag-badge">
                                        <i class="fas fa-flag"></i> @user.PendingReportCount (@user.TotalReportCount)
                                    </span>
                                                }
                                                else
                                                {
                                    <span class="text-muted">0 (0)</span>
                                            }
                                        </td>
                            <td>
                                <div class="action-buttons">
                                    @if (user.Status == "ban" || user.Status == "banned")
                                            {
                                                <form method="post" action="@Url.Action("UnbanUser", "Admin")" style="display: inline;">
                                            <input type="hidden" name="userId" value="@user.UserId" />
                                            <button type="submit" class="btn-action btn-unban" title="Unban">
                                                <i class="fas fa-user-check"></i>
                                                    </button>
                                                </form>
                                            }
                                    else
                                    {
                                        <button type="button" class="btn-action btn-ban" 
                                                onclick="showBanModal(@user.UserId, '@user.Username')" 
                                                title="Ban">
                                            <i class="fas fa-user-slash"></i>
                                                    </button>
                                    }

                                    <a href="@Url.Action("ViewUserReportDetails", "Admin", new { userId = user.UserId })" 
                                       class="btn-action btn-report" title="Xem báo cáo">
                                        <i class="fas fa-bars"></i>
                                    </a>
                                </div>
                                        </td>
                        </tr>
                    }
                }
                else
                {
                    <tr>
                        <td colspan="7" class="text-center">Không có người dùng nào</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
    </div>
</div>

<div class="modal fade" id="banModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Xác nhận Ban User</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                Bạn có chắc chắn muốn ban user <strong id="banUsername"></strong>?
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Hủy</button>
                <form method="post" action="@Url.Action("BanUser", "Admin")" id="banForm">
                    <input type="hidden" name="userId" id="banUserId" />
                    <button type="submit" class="btn btn-danger">Ban</button>
                </form>
                    </div>
                </div>
            </div>
</div>

<script>
function showBanModal(userId, username) {
    document.getElementById('banUserId').value = userId;
    document.getElementById('banUsername').textContent = username;
    new bootstrap.Modal(document.getElementById('banModal')).show();
}

document.addEventListener('DOMContentLoaded', function() {
    const searchInput = document.getElementById('searchInput');
    const sortSelect = document.getElementById('sortSelect');
    const table = document.getElementById('userTable');
    const tbody = table.querySelector('tbody');

    searchInput.addEventListener('input', function() {
        const searchTerm = this.value.toLowerCase();
        const rows = tbody.querySelectorAll('tr');
        
        rows.forEach(row => {
            const username = row.dataset.username || '';
            const email = row.dataset.email || '';
            
            if (username.includes(searchTerm) || email.includes(searchTerm)) {
                row.style.display = '';
            } else {
                row.style.display = 'none';
            }
        });
    });

    sortSelect.addEventListener('change', function() {
        const rows = Array.from(tbody.querySelectorAll('tr'));
        const sortType = this.value;
        
        rows.sort((a, b) => {
            switch(sortType) {
                case 'newest':
                    return new Date(b.dataset.date) - new Date(a.dataset.date);
                case 'oldest':
                    return new Date(a.dataset.date) - new Date(b.dataset.date);
                case 'most_flagged':
                    return parseInt(b.dataset.flags || 0) - parseInt(a.dataset.flags || 0);
                case 'least_flagged':
                    return parseInt(a.dataset.flags || 0) - parseInt(b.dataset.flags || 0);
                case 'az':
                    return (a.dataset.username || '').localeCompare(b.dataset.username || '');
                case 'za':
                    return (b.dataset.username || '').localeCompare(a.dataset.username || '');
                default:
                    return 0;
            }
        });
        
        rows.forEach(row => tbody.appendChild(row));
    });
});
</script>
