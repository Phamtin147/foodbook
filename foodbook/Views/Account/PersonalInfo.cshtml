@model foodbook.Models.ProfileViewModel

@{
    // 1. Khởi tạo an toàn. user sẽ là null nếu Model là null hoặc Model.User là null
    var user = Model?.User;

    ViewData["Title"] = "Thông tin cá nhân";

    // Nếu avatar là string (URL), chỉ cần kiểm tra null/empty
    string avatarSrc = Url.Content("~/images/default-avatar.jpg");

    // LOGIC AVATAR STRING: Chỉ kiểm tra và gán URL nếu có
    if (user != null && !string.IsNullOrEmpty(user.avatar_img))
    {
        // Giả định user.avatar_img LƯU TRỰC TIẾP URL
        avatarSrc = user.avatar_img;
    }

    // Logic hiển thị nút theo ngữ cảnh
    var sessionEmail = Context.Session.GetString("user_email");
    var isOwnProfile = !string.IsNullOrEmpty(sessionEmail) && 
                     !string.IsNullOrEmpty(user?.email) && 
                     string.Equals(sessionEmail, user.email, StringComparison.OrdinalIgnoreCase);
}

<div class="profile-page">

    @* KIỂM TRA LỖI/DỮ LIỆU THIẾU *@
    @if (user == null)
    {
        <div class="alert alert-danger text-center" role="alert">
            Không thể tải thông tin hồ sơ. Vui lòng đăng nhập lại.
        </div>
    }
    else
    {
        @* Profile Header Section - Exact match to image *@
        <div class="profile-header">
            <div class="profile-avatar">
                <img src="@avatarSrc" alt="Avatar" />
            </div>
            
            <div class="profile-info">
                <h2 class="profile-name">@(user.full_name ?? "Nguyễn Thu Thủy")</h2>
                
                <p class="profile-bio">@(user.bio ?? "Người đam mê ẩm thực, thích thử nghiệm các món ăn mới và chia sẻ bí quyết nấu nướng với mọi người. Luôn tìm kiếm những hương vị độc đáo và những trải nghiệm ẩm thực đáng nhớ. Các món ăn yêu thích: Bún Chả, Phở Cuốn, Gỏi Cuốn, Bánh Mì.")</p>
                
                <div class="profile-stats">
                    <span class="stat-item"><strong>@(Model?.RecipeCount ?? 28)</strong> Công thức</span>
                    <a href="@Url.Action("Followers", "Profile", new { id = user?.user_id })" class="stat-item-link">
                    <span class="stat-item"><strong>@(Model?.FollowersCount ?? 1200)</strong> Người theo dõi</span>
                    </a>
                    <a href="@Url.Action("Following", "Profile", new { id = user?.user_id })" class="stat-item-link">
                    <span class="stat-item"><strong>@(Model?.FollowingCount ?? 345)</strong> Đang theo dõi</span>
                    </a>
                </div>
                
                
                @if (isOwnProfile)
                {
                    @* Nút Chỉnh sửa khi xem profile của chính mình *@
                    <a href="@Url.Action("Edit", "Profile", new { id = user.user_id })" 
                       class="profile-edit-btn">
                        <i class="bi bi-pencil"></i> Chỉnh sửa hồ sơ
                    </a>
                }
                else
                {
                    @* Nút Follow khi xem profile của người khác *@
                    <div class="d-flex gap-2 justify-content-center">
                        @if (Model.IsFollowing)
                        {
                            <button class="btn btn-outline-secondary unfollow-btn" data-user-id="@Model.User.user_id">
                                <i class="bi bi-person-check"></i> Đã follow
                            </button>
                        }
                        else
                        {
                            <button class="btn btn-outline-success follow-btn" data-user-id="@Model.User.user_id">
                                <i class="bi bi-person-plus"></i> Follow
                            </button>
                        }
                        
                        <button class="btn btn-outline-danger" data-bs-toggle="modal" data-bs-target="#reportUserModal">
                            <i class="bi bi-flag"></i> Báo cáo
                        </button>
                    </div>
                }
            </div>
        </div>

        <div class="row">
            <div class="col-12">

                @* TAB GIAO DIỆN - Custom Style *@
                <div class="profile-tabs">
                    <ul class="nav nav-pills" id="pills-tab" role="tablist">
                    <li class="nav-item" role="presentation">
                            <button class="nav-link active" id="pills-posts-tab" data-bs-toggle="pill" data-bs-target="#pills-posts" type="button" role="tab" aria-controls="pills-posts" aria-selected="true">Bài đăng</button>
                    </li>
                    <li class="nav-item" role="presentation">
                            <button class="nav-link" id="pills-reacted-tab" data-bs-toggle="pill" data-bs-target="#pills-reacted" type="button" role="tab" aria-controls="pills-reacted" aria-selected="false">Đã reaction</button>
                    </li>
                </ul>
                </div>

                <div class="tab-content" id="pills-tabContent">
                    <div class="tab-pane fade show active" id="pills-posts" role="tabpanel" aria-labelledby="pills-posts-tab">
                        <div id="posts-container">
                            <!-- Posts will be loaded here -->
                            </div>
                    </div>

                    <div class="tab-pane fade" id="pills-reacted" role="tabpanel" aria-labelledby="pills-reacted-tab">
                        <div id="reacted-content">
                        <div class="text-center py-5">
                                <div class="spinner-border text-primary" role="status">
                                    <span class="visually-hidden">Loading...</span>
                                </div>
                                <p class="mt-3 text-muted">Đang tải danh sách đã reaction...</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    
    @Html.AntiForgeryToken()
    
    <script>
        // Global variables for posts
        const currentUserId = @(Model?.User?.user_id ?? 0);
        const isOwnProfile = @(isOwnProfile ? "true" : "false");
        let postsPage = 1;
        let postsLoading = false;
        let postsLoaded = false;

        // Initialize when page loads
        document.addEventListener('DOMContentLoaded', function() {
            loadPosts();
            setupTabHandlers();
        });

        // Load posts function
        async function loadPosts() {
            if (postsLoading || postsLoaded) return;
            
            postsLoading = true;
            const container = document.getElementById('posts-container');
            
            // Show loading
            container.innerHTML = `
                <div class="text-center py-5">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                    <p class="mt-3 text-muted">Đang tải bài đăng...</p>
                </div>
            `;

            try {
                const response = await fetch(`/Profile/GetUserPosts?userId=${currentUserId}&page=1&pageSize=8`);
                const data = await response.json();

                if (data.success && data.recipes && data.recipes.length > 0) {
                    // Show posts
                    container.innerHTML = `
                        <div class="row g-4" id="posts-grid">
                            ${data.recipes.map(recipe => createRecipeCard(recipe)).join('')}
                        </div>
                        <div class="text-center mt-4" id="load-more-container">
                            <button id="load-more-btn" class="btn btn-outline-primary">
                                <i class="bi bi-arrow-down-circle me-2"></i>Tải thêm
                            </button>
                        </div>
                    `;
                    
                    // Add event listener for load more button
                    document.getElementById('load-more-btn').addEventListener('click', loadMorePosts);
                    postsLoaded = true;
                } else {
                    // Show empty state
                    container.innerHTML = `
                        <div class="text-center py-5">
                            <i class="bi bi-journal-text text-muted" style="font-size: 3rem;"></i>
                            <h5 class="text-muted mt-3">Chưa có bài đăng nào</h5>
                            <p class="text-muted">Các công thức bạn tạo sẽ hiển thị ở đây</p>
                        </div>
                    `;
                    postsLoaded = true;
                }
            } catch (error) {
                console.error('Error loading posts:', error);
                container.innerHTML = `
                    <div class="text-center py-5">
                        <i class="bi bi-exclamation-triangle text-warning" style="font-size: 3rem;"></i>
                        <h5 class="text-muted mt-3">Lỗi khi tải dữ liệu</h5>
                        <p class="text-muted">Vui lòng thử lại sau</p>
                    </div>
                `;
            } finally {
                postsLoading = false;
            }
        }

        // Load more posts function
        async function loadMorePosts() {
            if (postsLoading) return;
            
            postsLoading = true;
            postsPage++;
            
            const loadMoreBtn = document.getElementById('load-more-btn');
            loadMoreBtn.innerHTML = '<i class="bi bi-hourglass-split me-2"></i>Đang tải...';
            loadMoreBtn.disabled = true;

            try {
                const response = await fetch(`/Profile/GetUserPosts?userId=${currentUserId}&page=${postsPage}&pageSize=8`);
                const data = await response.json();

                if (data.success && data.recipes && data.recipes.length > 0) {
                    const grid = document.getElementById('posts-grid');
                    data.recipes.forEach(recipe => {
                        const recipeCard = createRecipeCard(recipe);
                        grid.insertAdjacentHTML('beforeend', recipeCard);
                    });

                    // Check if no more data
                    if (data.recipes.length < 8) {
                        const container = document.getElementById('load-more-container');
                        container.innerHTML = '<p class="text-muted">Đã hiển thị tất cả bài đăng!</p>';
                    } else {
                        loadMoreBtn.innerHTML = '<i class="bi bi-arrow-down-circle me-2"></i>Tải thêm';
                        loadMoreBtn.disabled = false;
                    }
                } else {
                    // No more data
                    const container = document.getElementById('load-more-container');
                    container.innerHTML = '<p class="text-muted">Đã hiển thị tất cả bài đăng!</p>';
                }
            } catch (error) {
                console.error('Error loading more posts:', error);
                postsPage--; // Rollback
                loadMoreBtn.innerHTML = '<i class="bi bi-arrow-down-circle me-2"></i>Tải thêm';
                loadMoreBtn.disabled = false;
            } finally {
                postsLoading = false;
            }
        }

        // Create recipe card HTML
        function createRecipeCard(recipe) {
            const deleteBtn = isOwnProfile ? 
                `<button class="btn btn-outline-danger btn-sm" onclick="deleteRecipe(${recipe.recipeId})">
                    <i class="bi bi-trash"></i>
                </button>` : '';
            
            return `
                <div class="col-lg-3 col-md-4 col-sm-6" data-recipe-id="${recipe.recipeId}">
                    <div class="recipe-card h-100">
                        <div class="recipe-image">
                            <a href="/Recipe/Detail/${recipe.recipeId}">
                                <img src="${recipe.thumbnailImg || '/images/no-thumbnail.png'}" 
                                     class="w-100" 
                                     style="height:200px; object-fit:cover;" 
                                     alt="${recipe.name}" />
                            </a>
                        </div>
                        <div class="recipe-content">
                            <h6 class="recipe-title">
                                <a href="/Recipe/Detail/${recipe.recipeId}" class="text-decoration-none text-dark">
                                    ${recipe.name}
                                </a>
                            </h6>
                            <div class="recipe-actions">
                                <div class="recipe-stats">
                                    <span><i class="bi bi-hand-thumbs-up text-success"></i> ${recipe.likes || 0}</span>
                                    <span><i class="bi bi-clock"></i> ${recipe.cookTime || 0} phút</span>
                                </div>
                                ${deleteBtn}
                            </div>
                        </div>
                    </div>
                </div>
            `;
        }

        // Delete recipe function
        async function deleteRecipe(recipeId) {
            if (!confirm('Bạn có chắc chắn muốn xóa công thức này?')) {
                return;
            }

            try {
                const token = document.querySelector('input[name="__RequestVerificationToken"]')?.value || '';
                const formData = new FormData();
                formData.append('recipeId', recipeId);
                formData.append('__RequestVerificationToken', token);

                const response = await fetch('/Recipe/Delete', {
                    method: 'POST',
                    body: formData
                });
                
                const data = await response.json();

                if (data.success) {
                    // Remove the recipe card from DOM
                    const recipeCard = document.querySelector(`[data-recipe-id="${recipeId}"]`);
                    if (recipeCard) {
                        recipeCard.remove();
                    }
                    alert('Xóa công thức thành công!');
                } else {
                    alert('Lỗi khi xóa công thức: ' + data.message);
                }
            } catch (error) {
                console.error('Error deleting recipe:', error);
                alert('Lỗi khi xóa công thức');
            }
        }

        // Setup tab handlers
        function setupTabHandlers() {
            const tabButtons = document.querySelectorAll('[data-bs-toggle="pill"]');
            
            tabButtons.forEach(button => {
                button.addEventListener('shown.bs.tab', function(event) {
                    const target = event.target.getAttribute('data-bs-target');
                    
                    if (target === '#pills-posts') {
                        // Reset posts state when switching to posts tab
                        if (!postsLoaded) {
                            loadPosts();
                        }
                    } else if (target === '#pills-reacted') {
                        // Load reacted content
                        loadReactedContent();
                    }
                });
            });
        }

        // Load reacted content
        function loadReactedContent() {
            const reactedContent = document.getElementById('reacted-content');
            if (!reactedContent) return;

            // Check if already loaded
            if (reactedContent.dataset.loaded === 'true') return;

            fetch('/Profile/LoadReactedForProfile')
                .then(response => response.json())
                .then(data => {
                    if (data.success && data.reactions && data.reactions.length > 0) {
                        // Create grid layout similar to posts
                        const gridHtml = `
                            <div class="row g-4" id="reacted-recipes-grid">
                                ${data.reactions.map(recipe => createReactedRecipeCard(recipe)).join('')}
                            </div>
                            <div class="text-center mt-4">
                                <button id="loadMoreReactedBtn" class="btn btn-outline-primary">
                                    <i class="bi bi-arrow-down-circle me-2"></i>
                                    Tải thêm
                                </button>
                            </div>
                        `;
                        reactedContent.innerHTML = gridHtml;
                        reactedContent.dataset.loaded = 'true';
                        
                        // Add event listener for load more button
                        document.getElementById('loadMoreReactedBtn')?.addEventListener('click', loadMoreReacted);
                    } else {
                        // Show empty state
                        reactedContent.innerHTML = `
                            <div class="text-center py-5">
                                <i class="bi bi-heart text-muted" style="font-size: 3rem;"></i>
                                <h5 class="text-muted mt-3">Chưa có bài đăng nào được reaction</h5>
                                <p class="text-muted">Các bài đăng bạn đã thích sẽ hiển thị ở đây</p>
                            </div>
                        `;
                        reactedContent.dataset.loaded = 'true';
                    }
                })
                .catch(error => {
                    console.error('Error loading reacted content:', error);
                    reactedContent.innerHTML = `
                        <div class="text-center py-5">
                            <i class="bi bi-exclamation-triangle text-warning" style="font-size: 3rem;"></i>
                            <h5 class="text-muted mt-3">Lỗi khi tải dữ liệu</h5>
                            <p class="text-muted">Vui lòng thử lại sau</p>
                        </div>
                    `;
                });
        }

        // Create reacted recipe card
        function createReactedRecipeCard(recipe) {
            return `
                <div class="col-lg-3 col-md-4 col-sm-6">
                    <div class="recipe-card h-100">
                        <div class="recipe-image">
                            <a href="/Recipe/Detail/${recipe.recipeId}">
                                <img src="${recipe.thumbnailImg || '/images/no-thumbnail.png'}" 
                                     class="w-100" 
                                     style="height:200px; object-fit:cover;" 
                                     alt="${recipe.recipeName}" />
                            </a>
                        </div>
                        <div class="recipe-content">
                            <h6 class="recipe-title">
                                <a href="/Recipe/Detail/${recipe.recipeId}" class="text-decoration-none text-dark">
                                    ${recipe.recipeName}
                                </a>
                            </h6>
                            <div class="recipe-actions">
                                <div class="recipe-stats">
                                    <span><i class="bi bi-hand-thumbs-up text-success"></i> ${recipe.likesCount || 0}</span>
                                    <span><i class="bi bi-chat text-primary"></i> ${recipe.commentsCount || 0}</span>
                                    <span><i class="bi bi-share text-info"></i> ${recipe.sharesCount || 0}</span>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            `;
        }

        // Load more reacted recipes
        function loadMoreReacted() {
            const loadMoreBtn = document.getElementById('loadMoreReactedBtn');
            if (!loadMoreBtn || isLoading) return;

            isLoading = true;
            loadMoreBtn.innerHTML = '<i class="bi bi-hourglass-split me-2"></i>Đang tải...';
            loadMoreBtn.disabled = true;

            const token = document.querySelector('input[name="__RequestVerificationToken"]')?.value || '';
            const formData = new FormData();
            formData.append('page', currentPage + 1);
            formData.append('pageSize', 8);
            formData.append('__RequestVerificationToken', token);

            fetch('/Profile/LoadMoreReactions', {
                method: 'POST',
                body: formData
            })
            .then(response => response.json())
            .then(data => {
                if (data.success && data.recipes && data.recipes.length > 0) {
                    const grid = document.getElementById('reacted-recipes-grid');
                    if (grid) {
                        data.recipes.forEach(recipe => {
                            const recipeCard = createReactedRecipeCard(recipe);
                            grid.insertAdjacentHTML('beforeend', recipeCard);
                        });
                    }
                    currentPage++;
                    
                    // Hide load more button if no more data
                    if (data.recipes.length < 8) {
                        loadMoreBtn.style.display = 'none';
                    }
                } else {
                    loadMoreBtn.style.display = 'none';
                }
            })
            .catch(error => {
                console.error('Error loading more reacted recipes:', error);
            })
            .finally(() => {
                isLoading = false;
                loadMoreBtn.innerHTML = '<i class="bi bi-arrow-down-circle me-2"></i>Tải thêm';
                loadMoreBtn.disabled = false;
            });
        }

        // Delete recipe function
        function deleteRecipe(recipeId) {
            if (!confirm('Bạn có chắc chắn muốn xóa công thức này?')) {
                return;
            }

            const token = document.querySelector('input[name="__RequestVerificationToken"]')?.value || '';
            const formData = new FormData();
            formData.append('recipeId', recipeId);
            formData.append('__RequestVerificationToken', token);

            fetch('/Recipe/Delete', {
                method: 'POST',
                body: formData
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    // Remove the recipe card from DOM
                    const recipeCard = document.querySelector(`[data-recipe-id="${recipeId}"]`);
                    if (recipeCard) {
                        recipeCard.remove();
                    }
                    
                    // Show success message
                    alert('Xóa công thức thành công!');
                } else {
                    alert('Lỗi khi xóa công thức: ' + data.message);
                }
            })
            .catch(error => {
                console.error('Error deleting recipe:', error);
                alert('Lỗi khi xóa công thức');
            });
        }
    </script>
}

<style>
/* Profile Page Styles - Exact match to the image */
.profile-page {
    background: #f8f9fa;
    min-height: 100vh;
    padding: 2rem 0;
}

.profile-header {
    background: white;
    border-radius: 12px;
    box-shadow: 0 2px 10px rgba(0,0,0,0.1);
    padding: 3rem 2rem;
    text-align: center;
    margin: 0 auto 2rem auto;
    max-width: 800px;
}

.profile-avatar {
    margin-bottom: 1.5rem;
}

.profile-avatar img {
    width: 120px;
    height: 120px;
    border: 2px solid #e9ecef;
    border-radius: 50%;
    object-fit: cover;
}

.profile-name {
    font-weight: bold;
    margin-bottom: 1rem;
    color: #212529;
    font-size: 2rem;
}

.profile-bio {
    max-width: 600px;
    margin: 0 auto 1.5rem auto;
    line-height: 1.6;
    font-size: 1rem;
    color: #6c757d;
}

.profile-stats {
    display: flex;
    justify-content: center;
    gap: 2rem;
    margin-bottom: 1.5rem;
    font-size: 1rem;
}

.stat-item {
    color: #6c757d;
    font-weight: 600;
}

.stat-item strong {
    color: #212529;
    font-weight: bold;
}

.stat-item-link {
    text-decoration: none;
    color: inherit;
    transition: all 0.3s ease;
}

.stat-item-link:hover {
    text-decoration: none;
    color: #28a745;
    transform: scale(1.05);
}

.stat-item-link:hover .stat-item {
    color: #28a745;
}

.profile-edit-btn {
    background: white;
    border: 1px solid #dee2e6;
    color: #6c757d;
    padding: 0.75rem 2rem;
    border-radius: 8px;
    font-size: 1rem;
    font-weight: 500;
    transition: all 0.3s ease;
    text-decoration: none;
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
}

.profile-edit-btn:hover {
    background: #f8f9fa;
    color: #495057;
    text-decoration: none;
}

/* Profile Tabs */
.profile-tabs {
    margin-bottom: 2rem;
    text-align: center;
}

.profile-tabs .nav-pills {
    background: #f8f9fa;
    border-radius: 12px;
    padding: 0.5rem;
    display: inline-flex;
}

.profile-tabs .nav-link {
    border-radius: 8px;
    color: #6c757d;
    font-weight: 600;
    transition: all 0.3s ease;
    border: none;
    padding: 0.75rem 1.5rem;
}

.profile-tabs .nav-link.active {
    background: #28a745;
    color: white;
    box-shadow: 0 2px 8px rgba(40, 167, 69, 0.3);
}

.profile-tabs .nav-link:hover:not(.active) {
    background: #e9ecef;
    color: #495057;
}

/* Recipe Cards */
.recipe-card {
    background: white;
    border-radius: 12px;
    box-shadow: 0 2px 8px rgba(0,0,0,0.1);
    transition: all 0.3s ease;
    overflow: hidden;
    border: none;
    height: 100%;
}

.recipe-card:hover {
    transform: translateY(-4px);
    box-shadow: 0 8px 25px rgba(0,0,0,0.15);
}

.recipe-image {
    overflow: hidden;
    border-radius: 12px 12px 0 0;
    height: 200px;
}

.recipe-image img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    transition: transform 0.3s ease;
}

.recipe-card:hover .recipe-image img {
    transform: scale(1.05);
}

.recipe-content {
    padding: 1rem;
}

.recipe-title {
    color: #212529;
    font-size: 1rem;
    line-height: 1.4;
    font-weight: 600;
    margin-bottom: 0.75rem;
}

.recipe-actions {
    display: flex;
    justify-content: space-between;
    align-items: center;
    font-size: 0.875rem;
}

.recipe-stats {
    display: flex;
    gap: 1rem;
    color: #6c757d;
}

.recipe-stats span {
    display: flex;
    align-items: center;
    gap: 0.25rem;
}

.recipe-actions .btn-outline-danger {
    border-color: #dc3545;
    color: #dc3545;
    padding: 0.25rem 0.5rem;
    border-radius: 6px;
    transition: all 0.2s ease;
    font-size: 0.75rem;
}

.recipe-actions .btn-outline-danger:hover {
    background: #dc3545;
    color: white;
    transform: scale(1.05);
}

/* Responsive */
@@media (max-width: 768px) {
    .profile-header {
        padding: 2rem 1.5rem;
    }
    
    .profile-stats {
        flex-direction: column;
        gap: 0.5rem;
    }
    
    .stat-item {
        text-align: center;
    }
    
    .profile-bio {
        font-size: 0.9rem;
    }
    
    .profile-tabs .nav-pills {
        flex-direction: column;
    }
}

@@media (max-width: 576px) {
    .profile-avatar img {
        width: 100px;
        height: 100px;
    }
    
    .profile-name {
        font-size: 1.5rem;
    }
    
    .profile-edit-btn {
        padding: 0.5rem 1.5rem;
        font-size: 0.9rem;
    }
}
</style>

<!-- Report User Modal -->
<div class="modal fade" id="reportUserModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header border-0">
                <h5 class="modal-title fw-bold">Báo cáo người dùng</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p class="text-muted mb-3">Vui lòng cho chúng tôi biết lý do báo cáo người dùng này:</p>
                <div class="mb-3">
                    <label for="reportUserReason" class="form-label">Lý do <span class="text-danger">*</span></label>
                    <textarea class="form-control" id="reportUserReason" rows="4" 
                              placeholder="Ví dụ: Spam, quấy rối, giả mạo, nội dung không phù hợp..."></textarea>
                </div>
            </div>
            <div class="modal-footer border-0">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Hủy</button>
                <button type="button" class="btn btn-danger" id="btnReportUser">Gửi báo cáo</button>
            </div>
        </div>
    </div>
</div>

<script>
// Report User functionality
document.addEventListener('DOMContentLoaded', function() {
    const btnReportUser = document.getElementById('btnReportUser');
    if (btnReportUser) {
        btnReportUser.addEventListener('click', async function() {
            const reason = document.getElementById('reportUserReason').value;
            const userId = @(Model?.User?.user_id ?? 0);
            
            if (!reason.trim()) {
                showAlertModal('Vui lòng nhập lý do báo cáo', 'warning');
                return;
            }
            
            try {
                const response = await fetch('/Profile/ReportUser', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ 
                        userId: userId,
                        reason: reason.trim()
                    })
                });
                
                const result = await response.json();
                if (result.success) {
                    const modal = bootstrap.Modal.getInstance(document.getElementById('reportUserModal'));
                    if (modal) {
                        modal.hide();
                    }
                    document.getElementById('reportUserReason').value = '';
                    showAlertModal(result.message, 'success');
                } else {
                    showAlertModal(result.message, 'error');
                }
            } catch (error) {
                console.error('Error reporting user:', error);
                showAlertModal('Có lỗi xảy ra. Vui lòng thử lại.', 'error');
            }
        });
    }
});

// Alert Modal functionality
function showAlertModal(message, type) {
    const alertModal = document.getElementById('alertModal');
    const alertMessage = document.getElementById('alertMessage');
    const alertIcon = document.getElementById('alertIcon');
    const alertTitle = document.getElementById('alertTitle');
    
    alertMessage.textContent = message;
    
    if (type === 'success') {
        alertIcon.className = 'fas fa-check-circle text-success';
        alertTitle.textContent = 'Thành công';
    } else if (type === 'error') {
        alertIcon.className = 'fas fa-times-circle text-danger';
        alertTitle.textContent = 'Lỗi';
    } else {
        alertIcon.className = 'fas fa-exclamation-triangle text-warning';
        alertTitle.textContent = 'Cảnh báo';
    }
    
    new bootstrap.Modal(alertModal).show();
}
</script>

<!-- Alert Modal -->
<div class="modal fade" id="alertModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-body text-center p-4">
                <i id="alertIcon" class="fas fa-check-circle" style="font-size: 3rem; margin-bottom: 1rem;"></i>
                <h5 id="alertTitle" class="mb-3">Thành công</h5>
                <p id="alertMessage" class="mb-0"></p>
            </div>
            <div class="modal-footer border-0 justify-content-center">
                <button type="button" class="btn btn-primary" data-bs-dismiss="modal">Đóng</button>
            </div>
        </div>
    </div>
</div>