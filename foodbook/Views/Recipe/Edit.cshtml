@model AddRecipeViewModel
@{
    ViewData["Title"] = "Chỉnh sửa công thức";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="add-recipe-container">
    <div class="row">
        <!-- Left Column - Main Form -->
        <div class="col-lg-8 recipe-main-column">
            <form asp-action="Edit" asp-route-id="@ViewBag.RecipeId" method="post" enctype="multipart/form-data" id="addRecipeForm">
                <div class="recipe-section">
                    <h3 class="section-title">Tên công thức</h3>
                    <input type="text" 
                           class="form-control recipe-name-input" 
                           asp-for="Name" 
                           placeholder="VD: Cơm chiên">
                    <span asp-validation-for="Name" class="text-danger"></span>
                </div>

                <div class="recipe-section">
                    <h3 class="section-title">Ảnh chính</h3>
                    <div class="upload-area" id="mainMediaUpload" onclick="document.getElementById('mainMediaInput').click()">
                        <input type="file" 
                               asp-for="MainMedia" 
                               class="d-none" 
                               id="mainMediaInput"
                               accept="image/*,video/*">
                        <div class="upload-placeholder" id="mainMediaPlaceholder">
                            @if (!string.IsNullOrEmpty(Model.ThumbnailUrl))
                            {
                                <img src="@Model.ThumbnailUrl" alt="Preview" class="upload-preview-img">
                            }
                            else
                            {
                                <i class="bi bi-camera fs-1 text-muted"></i>
                                <p class="text-muted mt-3">Nhấn để thêm ảnh hoặc video</p>
                            }
                        </div>
                    </div>
                </div>

                <div class="recipe-section">
                    <h3 class="section-title">Mô tả nguyên liệu</h3>
                    <textarea class="form-control recipe-textarea" 
                              asp-for="Description" 
                              rows="6"
                              placeholder="VD: 500g Ức gà không xương không da&#10;3 muỗng canh Mật ong&#10;2 muỗng canh Nước cốt chanh&#10;1 muỗng canh Dầu ô liu"></textarea>
                </div>

                <div class="recipe-section recipe-steps-section">
                    <h3 class="section-title">Hướng dẫn từng bước</h3>
                    <div id="stepsContainer">
                        @if (Model.Steps != null && Model.Steps.Any())
                        {
                            @for (int i = 0; i < Model.Steps.Count; i++)
                            {
                                var step = Model.Steps[i];
                                var stepNumber = i + 1;
                                <div class="step-item" data-step="@(stepNumber)">
                                    <div class="step-header @(i == 0 ? "" : "collapsed")" data-bs-toggle="collapse" data-bs-target="#step@(stepNumber)">
                                        <span class="step-label">Bước @(stepNumber):</span>
                                        <i class="bi bi-chevron-down"></i>
                                    </div>
                                    <div class="collapse @(i == 0 ? "show" : "")" id="step@(stepNumber)">
                                        <div class="step-content">
                                            <input type="hidden" name="Steps[@i].StepNumber" value="@(stepNumber)" />
                                            <label class="form-label">Mô tả bước</label>
                                            <textarea class="form-control mb-3" 
                                                      name="Steps[@i].Instruction" 
                                                      rows="3"
                                                      placeholder="Nhập mô tả chi tiết cho bước này...">@step.Instruction</textarea>
                                            
                                            <label class="form-label">Ảnh/Video minh họa (có thể chọn nhiều)</label>
                                            
                                            @* Hidden inputs for existing media - OUTSIDE grid to prevent deletion *@
                                            @if (step.ExistingMediaUrls != null && step.ExistingMediaUrls.Any())
                                            {
                                                int mediaIndex = 0;
                                                @foreach (var mediaUrl in step.ExistingMediaUrls)
                                                {
                                                    <input type="hidden" name="Steps[@i].ExistingMediaUrls[@mediaIndex]" value="@mediaUrl" class="existing-media-url" />
                                                    mediaIndex++;
                                                }
                                            }
                                            
                                            <div class="step-media-container">
                                                <input type="file" 
                                                       name="Steps[@i].StepMedia" 
                                                       class="d-none step-media-input"
                                                       accept="image/*,video/*"
                                                       multiple
                                                       data-step="@(stepNumber)">
                                                <div class="step-media-upload-btn" onclick="this.previousElementSibling.click()">
                                                    <i class="bi bi-plus-circle"></i>
                                                    <span>Thêm ảnh/video</span>
                                                </div>
                                                <div class="step-media-grid" id="mediaGrid@(stepNumber)">
                                                    @if (step.ExistingMediaUrls != null && step.ExistingMediaUrls.Any())
                                                    {
                                                        @foreach (var mediaUrl in step.ExistingMediaUrls)
                                                        {
                                                            <div class="step-media-item">
                                                                @if (mediaUrl.Contains(".mp4") || mediaUrl.Contains(".mov") || mediaUrl.Contains(".avi"))
                                                                {
                                                                    <video src="@mediaUrl"></video>
                                                                    <div class="video-overlay"><i class="bi bi-play-circle"></i></div>
                                                                }
                                                                else
                                                                {
                                                                    <img src="@mediaUrl" alt="Existing media">
                                                                }
                                                                <div class="existing-media-badge">Hiện tại</div>
                                                            </div>
                                                        }
                                                    }
                                                </div>
                                            </div>
                                            
                                            <button type="button" class="btn btn-delete-step" onclick="deleteStep(@(stepNumber))">
                                                <i class="bi bi-x"></i> Xóa bước
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            }
                        }
                        else
                        {
                            <!-- Default step nếu chưa có step nào -->
                            <div class="step-item" data-step="1">
                                <div class="step-header" data-bs-toggle="collapse" data-bs-target="#step1">
                                    <span class="step-label">Bước 1:</span>
                                    <i class="bi bi-chevron-down"></i>
                                </div>
                                <div class="collapse show" id="step1">
                                    <div class="step-content">
                                        <input type="hidden" name="Steps[0].StepNumber" value="1" />
                                        <label class="form-label">Mô tả bước</label>
                                        <textarea class="form-control mb-3" 
                                                  name="Steps[0].Instruction" 
                                                  rows="3"
                                                  placeholder="Nhập mô tả chi tiết cho bước này..."></textarea>
                                        
                                        <label class="form-label">Ảnh/Video minh họa (có thể chọn nhiều)</label>
                                        <div class="step-media-container">
                                            <input type="file" 
                                                   name="Steps[0].StepMedia" 
                                                   class="d-none step-media-input"
                                                   accept="image/*,video/*"
                                                   multiple
                                                   data-step="1">
                                            <div class="step-media-upload-btn" onclick="this.previousElementSibling.click()">
                                                <i class="bi bi-plus-circle"></i>
                                                <span>Thêm ảnh/video</span>
                                            </div>
                                            <div class="step-media-grid" id="mediaGrid1"></div>
                                        </div>
                                        
                                        <button type="button" class="btn btn-delete-step" onclick="deleteStep(1)">
                                            <i class="bi bi-x"></i> Xóa bước
                                        </button>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>

                    <button type="button" class="btn btn-add-step" onclick="addStep()">
                        <i class="bi bi-plus-circle"></i> Thêm bước
                    </button>
                </div>

                <div class="recipe-section recipe-submit-section">
                    <button type="submit" class="btn btn-save-recipe" id="submitBtn">
                        <span class="btn-text">Cập nhật công thức</span>
                        <span class="spinner-border spinner-border-sm d-none" role="status"></span>
                    </button>
                </div>
            </form>
        </div>

        <!-- Right Column - Sidebar Info -->
        <div class="col-lg-4 recipe-sidebar-column">
            <div class="recipe-sidebar">
                <!-- Nguyên liệu -->
                <div class="recipe-info-section">
                    <h5 class="recipe-info-title">Nguyên liệu</h5>
                    <p class="recipe-info-subtitle">Thêm nguyên liệu/từ vực gắn 50</p>
                    
                    <div class="input-with-add-btn">
                        <input type="text" 
                               class="form-control autocomplete-input" 
                               id="ingredientInput"
                               placeholder="Nhập nguyên liệu...">
                        <button type="button" class="btn btn-add-circle" onclick="addIngredientTag()">
                            <i class="bi bi-plus-circle"></i>
                        </button>
                    </div>
                    
                    <div class="autocomplete-dropdown" id="ingredientDropdown"></div>
                    
                    <div class="tags-container mt-3" id="ingredientTags"></div>
                </div>

                <!-- Phân loại -->
                <div class="recipe-info-section">
                    <h5 class="recipe-info-title">Phân Loại</h5>
                    <p class="recipe-info-subtitle">Thêm phân loại (VD: Việt nam)</p>
                    
                    <div class="input-with-add-btn">
                        <input type="text" 
                               class="form-control autocomplete-input" 
                               id="categoryInput"
                               placeholder="Nhập phân loại...">
                        <button type="button" class="btn btn-add-circle" onclick="addCategoryTag()">
                            <i class="bi bi-plus-circle"></i>
                        </button>
                    </div>
                    
                    <div class="autocomplete-dropdown" id="categoryDropdown"></div>
                    
                    <div class="tags-container mt-3" id="categoryTags"></div>
                </div>

                <!-- Thời gian nấu -->
                <div class="recipe-info-section">
                    <h5 class="recipe-info-title">Thời gian nấu</h5>
                    <div class="time-input-group">
                        <i class="bi bi-clock"></i>
                        <input type="number" 
                               class="form-control time-input" 
                               asp-for="CookTime" 
                               name="CookTime"
                               id="CookTime"
                               value="@Model.CookTime"
                               min="1"
                               max="1440"
                               required>
                        <span class="time-unit">phút</span>
                    </div>
                    <span asp-validation-for="CookTime" class="text-danger small"></span>
                </div>

                <!-- Độ khó -->
                <div class="recipe-info-section">
                    <h5 class="recipe-info-title">Độ khó</h5>
                    <div class="difficulty-buttons">
                        <button type="button" 
                                class="btn btn-difficulty @(Model.Level == "dễ" ? "active" : "")" 
                                data-level="dễ"
                                onclick="selectDifficulty(this, 'dễ')">
                            Dễ
                        </button>
                        <button type="button" 
                                class="btn btn-difficulty @(Model.Level == "bình thường" ? "active" : "")" 
                                data-level="bình thường"
                                onclick="selectDifficulty(this, 'bình thường')">
                            Bình thường
                        </button>
                        <button type="button" 
                                class="btn btn-difficulty @(Model.Level == "khó" ? "active" : "")" 
                                data-level="khó"
                                onclick="selectDifficulty(this, 'khó')">
                            Khó
                        </button>
                    </div>
                    <input type="hidden" asp-for="Level" id="levelInput" value="@Model.Level">
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <script>
        // Data từ server (ViewBag)
        const mockIngredients = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(ViewBag.IngredientSuggestions ?? new List<string>()));
        const mockCategories = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(ViewBag.TypeSuggestions ?? new List<string>()));

        // Load existing data
        let ingredientList = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.Ingredients ?? new List<string>()));
        let categoryList = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.RecipeTypes ?? new List<string>()));

        function setupAutocomplete(inputId, dropdownId, dataSource, onSelect) {
            const input = document.getElementById(inputId);
            const dropdown = document.getElementById(dropdownId);

            input.addEventListener('input', function() {
                const value = this.value.toLowerCase().trim();
                dropdown.innerHTML = '';

                if (value.length === 0) {
                    dropdown.style.display = 'none';
                    return;
                }

                const filtered = dataSource.filter(item => 
                    item.toLowerCase().includes(value)
                );

                if (filtered.length > 0) {
                    dropdown.style.display = 'block';
                    filtered.slice(0, 5).forEach(item => {
                        const div = document.createElement('div');
                        div.className = 'autocomplete-item';
                        div.textContent = item;
                        div.onclick = function() {
                            input.value = item;
                            onSelect();
                            dropdown.style.display = 'none';
                        };
                        dropdown.appendChild(div);
                    });
                } else {
                    dropdown.style.display = 'none';
                }
            });

            document.addEventListener('click', function(e) {
                if (!input.contains(e.target) && !dropdown.contains(e.target)) {
                    dropdown.style.display = 'none';
                }
            });

            input.addEventListener('keypress', function(e) {
                if (e.key === 'Enter') {
                    e.preventDefault();
                    if (this.value.trim()) {
                        if (inputId === 'ingredientInput') {
                            addIngredientTag();
                        } else {
                            addCategoryTag();
                        }
                    }
                }
            });
        }

        function addIngredientTag() {
            const input = document.getElementById('ingredientInput');
            const value = input.value.trim();
            
            if (!value) return;
            
            if (!ingredientList.includes(value)) {
                ingredientList.push(value);
                renderIngredientTags();
                
                if (!mockIngredients.includes(value)) {
                    mockIngredients.push(value);
                }
            }
            
            input.value = '';
            document.getElementById('ingredientDropdown').style.display = 'none';
        }

        function addCategoryTag() {
            const input = document.getElementById('categoryInput');
            const value = input.value.trim();
            
            if (!value) return;
            
            if (!categoryList.includes(value)) {
                categoryList.push(value);
                renderCategoryTags();
                
                if (!mockCategories.includes(value)) {
                    mockCategories.push(value);
                }
            }
            
            input.value = '';
            document.getElementById('categoryDropdown').style.display = 'none';
        }

        function renderIngredientTags() {
            const container = document.getElementById('ingredientTags');
            container.innerHTML = '';
            ingredientList.forEach(value => {
                const tag = document.createElement('span');
                tag.className = 'recipe-tag';
                tag.innerHTML = `${value} <button type="button" onclick="removeIngredientTag('${value}')">×</button>`;
                container.appendChild(tag);
            });
        }

        function renderCategoryTags() {
            const container = document.getElementById('categoryTags');
            container.innerHTML = '';
            categoryList.forEach(value => {
                const tag = document.createElement('span');
                tag.className = 'recipe-tag';
                tag.innerHTML = `${value} <button type="button" onclick="removeCategoryTag('${value}')">×</button>`;
                container.appendChild(tag);
            });
        }

        function removeIngredientTag(value) {
            ingredientList = ingredientList.filter(item => item !== value);
            renderIngredientTags();
        }

        function removeCategoryTag(value) {
            categoryList = categoryList.filter(item => item !== value);
            renderCategoryTags();
        }

        function addStep() {
            const stepsContainer = document.getElementById('stepsContainer');
            const currentSteps = stepsContainer.querySelectorAll('.step-item');
            const newStepNumber = currentSteps.length + 1;
            const newStepIndex = currentSteps.length;
            
            const stepHtml = `
                <div class="step-item" data-step="${newStepNumber}">
                    <div class="step-header collapsed" data-bs-toggle="collapse" data-bs-target="#step${newStepNumber}">
                        <span class="step-label">Bước ${newStepNumber}:</span>
                        <i class="bi bi-chevron-down"></i>
                    </div>
                    <div class="collapse" id="step${newStepNumber}">
                        <div class="step-content">
                            <input type="hidden" name="Steps[${newStepIndex}].StepNumber" value="${newStepNumber}" />
                            <label class="form-label">Mô tả bước</label>
                            <textarea class="form-control mb-3" 
                                      name="Steps[${newStepIndex}].Instruction" 
                                      rows="3"
                                      placeholder="Nhập mô tả chi tiết cho bước này..."></textarea>
                            
                            <label class="form-label">Ảnh/Video minh họa (có thể chọn nhiều)</label>
                            <div class="step-media-container">
                                <input type="file" 
                                       name="Steps[${newStepIndex}].StepMedia" 
                                       class="d-none step-media-input"
                                       accept="image/*,video/*"
                                       multiple
                                       data-step="${newStepNumber}">
                                <div class="step-media-upload-btn" onclick="this.previousElementSibling.click()">
                                    <i class="bi bi-plus-circle"></i>
                                    <span>Thêm ảnh/video</span>
                                </div>
                                <div class="step-media-grid" id="mediaGrid${newStepNumber}"></div>
                            </div>
                            
                            <button type="button" class="btn btn-delete-step" onclick="deleteStep(${newStepNumber})">
                                <i class="bi bi-x"></i> Xóa bước
                            </button>
                        </div>
                    </div>
                </div>
            `;
            stepsContainer.insertAdjacentHTML('beforeend', stepHtml);
        }

        function deleteStep(stepNum) {
            const stepItem = document.querySelector(`[data-step="${stepNum}"]`);
            if (stepItem) {
                if (stepMediaFiles[stepNum]) {
                    delete stepMediaFiles[stepNum];
                }
                
                stepItem.remove();
                reindexSteps();
            }
        }

        function reindexSteps() {
            const stepsContainer = document.getElementById('stepsContainer');
            const stepItems = stepsContainer.querySelectorAll('.step-item');
            const newStepMediaFiles = {};
            
            stepItems.forEach((stepItem, index) => {
                const newStepNumber = index + 1;
                const newStepIndex = index;
                
                stepItem.setAttribute('data-step', newStepNumber);
                
                const stepLabel = stepItem.querySelector('.step-label');
                if (stepLabel) {
                    stepLabel.textContent = `Bước ${newStepNumber}:`;
                }
                
                const stepHeader = stepItem.querySelector('.step-header');
                const collapseDiv = stepItem.querySelector('.collapse');
                if (stepHeader && collapseDiv) {
                    stepHeader.setAttribute('data-bs-target', `#step${newStepNumber}`);
                    collapseDiv.setAttribute('id', `step${newStepNumber}`);
                }
                
                // Update hidden StepNumber input
                const hiddenStepNumber = stepItem.querySelector('input[type="hidden"][name*="StepNumber"]');
                if (hiddenStepNumber) {
                    hiddenStepNumber.setAttribute('name', `Steps[${newStepIndex}].StepNumber`);
                    hiddenStepNumber.value = newStepNumber;
                }
                
                const textarea = stepItem.querySelector('textarea');
                if (textarea) {
                    textarea.setAttribute('name', `Steps[${newStepIndex}].Instruction`);
                }
                
                const fileInput = stepItem.querySelector('.step-media-input');
                if (fileInput) {
                    fileInput.setAttribute('name', `Steps[${newStepIndex}].StepMedia`);
                    const oldStepNumber = fileInput.getAttribute('data-step');
                    fileInput.setAttribute('data-step', newStepNumber);
                    
                    if (stepMediaFiles[oldStepNumber]) {
                        newStepMediaFiles[newStepNumber] = stepMediaFiles[oldStepNumber];
                    }
                }
                
                const mediaGrid = stepItem.querySelector('.step-media-grid');
                if (mediaGrid) {
                    mediaGrid.setAttribute('id', `mediaGrid${newStepNumber}`);
                }
                
                // Update existing media URLs hidden inputs
                const existingMediaInputs = stepItem.querySelectorAll('.existing-media-url');
                existingMediaInputs.forEach((input, mediaIdx) => {
                    input.setAttribute('name', `Steps[${newStepIndex}].ExistingMediaUrls[${mediaIdx}]`);
                });
                
                const deleteBtn = stepItem.querySelector('.btn-delete-step');
                if (deleteBtn) {
                    deleteBtn.setAttribute('onclick', `deleteStep(${newStepNumber})`);
                }
            });
            
            stepMediaFiles = newStepMediaFiles;
            
            Object.keys(stepMediaFiles).forEach(stepNumber => {
                renderMediaGrid(parseInt(stepNumber));
            });
        }

        function selectDifficulty(btn, level) {
            document.querySelectorAll('.btn-difficulty').forEach(b => b.classList.remove('active'));
            btn.classList.add('active');
            document.getElementById('levelInput').value = level;
        }

        let stepMediaFiles = {};

        document.getElementById('mainMediaInput')?.addEventListener('change', function(e) {
            const file = e.target.files[0];
            if (file) {
                const reader = new FileReader();
                const placeholder = document.getElementById('mainMediaPlaceholder');
                reader.onload = function(e) {
                    if (file.type.startsWith('image/')) {
                        placeholder.innerHTML = `<img src="${e.target.result}" alt="Preview" class="upload-preview-img">`;
                    } else if (file.type.startsWith('video/')) {
                        placeholder.innerHTML = `<video src="${e.target.result}" class="upload-preview-img" controls></video>`;
                    }
                };
                reader.readAsDataURL(file);
            }
        });

        // Xử lý upload nhiều media cho steps
        document.addEventListener('change', function(e) {
            if (e.target.classList.contains('step-media-input')) {
                const input = e.target;
                const stepNumber = input.getAttribute('data-step');
                const files = Array.from(input.files);
                
                if (files.length > 0) {
                    // Khởi tạo array nếu chưa có
                    if (!stepMediaFiles[stepNumber]) {
                        stepMediaFiles[stepNumber] = [];
                    }
                    
                    // Thêm files mới vào
                    stepMediaFiles[stepNumber] = stepMediaFiles[stepNumber].concat(files);
                    
                    // Render grid
                    renderMediaGrid(stepNumber);
                }
            }
        });

        function renderMediaGrid(stepNumber) {
            const gridContainer = document.getElementById(`mediaGrid${stepNumber}`);
            if (!gridContainer) {
                console.warn(`Media grid container not found for step ${stepNumber}`);
                return;
            }
            
            const files = stepMediaFiles[stepNumber] || [];
            
            // Keep existing media (items with class 'existing-media-badge')
            const existingMediaItems = Array.from(gridContainer.querySelectorAll('.step-media-item')).filter(item => 
                item.querySelector('.existing-media-badge')
            );
            
            gridContainer.innerHTML = '';
            
            // Re-add existing media first
            existingMediaItems.forEach(item => gridContainer.appendChild(item));
            
            // Then add new files
            files.forEach((file, index) => {
                const reader = new FileReader();
                reader.onload = function(e) {
                    const mediaItem = document.createElement('div');
                    mediaItem.className = 'step-media-item';
                    
                    let mediaContent = '';
                    if (file.type.startsWith('image/')) {
                        mediaContent = `<img src="${e.target.result}" alt="Media ${index + 1}">`;
                    } else if (file.type.startsWith('video/')) {
                        mediaContent = `
                            <video src="${e.target.result}"></video>
                            <div class="video-overlay"><i class="bi bi-play-circle"></i></div>
                        `;
                    }
                    
                    mediaItem.innerHTML = `
                        ${mediaContent}
                        <button type="button" class="btn-remove-media" onclick="removeMediaFile(${stepNumber}, ${index})">
                            <i class="bi bi-x"></i>
                        </button>
                        <div class="media-order">${existingMediaItems.length + index + 1}</div>
                    `;
                    
                    gridContainer.appendChild(mediaItem);
                };
                reader.readAsDataURL(file);
            });
        }

        function removeMediaFile(stepNumber, fileIndex) {
            if (stepMediaFiles[stepNumber]) {
                stepMediaFiles[stepNumber].splice(fileIndex, 1);
                renderMediaGrid(stepNumber);
            }
        }

        function prepareFormSubmit(event) {
            const form = document.getElementById('addRecipeForm');
            
            // Debug: Log values before submit
            // Find CookTime input by id or name (we set id="CookTime" explicitly)
            let cookTimeInput = document.getElementById('CookTime');
            if (!cookTimeInput) {
                cookTimeInput = form.querySelector('input[name="CookTime"]');
            }
            if (!cookTimeInput) {
                cookTimeInput = form.querySelector('input[type="number"].time-input');
            }
            
            const levelInput = document.getElementById('levelInput');
            
            console.log('=== BEFORE SUBMIT ===');
            console.log('CookTime input found:', cookTimeInput);
            console.log('CookTime input id:', cookTimeInput ? cookTimeInput.id : 'NOT FOUND');
            console.log('CookTime input name:', cookTimeInput ? cookTimeInput.name : 'NOT FOUND');
            console.log('CookTime input type:', cookTimeInput ? cookTimeInput.type : 'NOT FOUND');
            console.log('CookTime input value:', cookTimeInput ? cookTimeInput.value : 'NOT FOUND');
            console.log('Level input:', levelInput);
            console.log('Level value:', levelInput ? levelInput.value : 'NOT FOUND');
            
            // Get values BEFORE any manipulation - CRITICAL: Use the actual input value
            let cookTimeValue = '';
            if (cookTimeInput) {
                cookTimeValue = cookTimeInput.value.trim();
                console.log('Raw CookTime value from input:', cookTimeValue, '(type:', typeof cookTimeValue, ')');
            } else {
                console.error('CookTime input NOT FOUND!');
            }
            
            // Validate CookTime is not empty (but don't override user input if valid)
            if (!cookTimeValue || cookTimeValue === '' || isNaN(parseInt(cookTimeValue)) || parseInt(cookTimeValue) < 1) {
                console.warn('CookTime is invalid or empty:', cookTimeValue);
                if (!cookTimeValue || cookTimeValue === '') {
                    cookTimeValue = '30'; // Only use default if truly empty
                    console.warn('Setting CookTime to default 30');
                    if (cookTimeInput) {
                        cookTimeInput.value = cookTimeValue;
                    }
                }
            }
            
            console.log('Final CookTime value to submit:', cookTimeValue);
            
            // Remove old dynamic inputs ONLY (not CookTime or Level)
            form.querySelectorAll('.dynamic-hidden-input').forEach(el => {
                // Don't remove if it's CookTime or Level
                if (el.name !== 'CookTime' && el.name !== 'Level') {
                    el.remove();
                }
            });
            
            // CRITICAL: Ensure CookTime input exists with correct name and value
            // asp-for should create name="CookTime", but verify it exists
            let cookTimeInputToSubmit = form.querySelector('input[name="CookTime"]');
            
            if (!cookTimeInputToSubmit) {
                // Create new input if not found
                cookTimeInputToSubmit = document.createElement('input');
                cookTimeInputToSubmit.type = 'hidden';
                cookTimeInputToSubmit.name = 'CookTime';
                form.appendChild(cookTimeInputToSubmit);
                console.log('Created new CookTime input');
            }
            
            // ALWAYS set the value to what user entered
            cookTimeInputToSubmit.value = cookTimeValue;
            console.log('Set CookTime input value:', cookTimeInputToSubmit.name, '=', cookTimeInputToSubmit.value);
            
            // Also ensure visible input has the value
            if (cookTimeInput && cookTimeInput !== cookTimeInputToSubmit) {
                // If visible input is different from the one being submitted
                if (cookTimeInput.name !== 'CookTime') {
                    // Visible input doesn't have name="CookTime", make sure submit input has correct value
                    cookTimeInputToSubmit.value = cookTimeInput.value || cookTimeValue;
                    console.log('Using value from visible input:', cookTimeInput.value);
                } else {
                    // Visible input has correct name, sync values
                    cookTimeInput.value = cookTimeValue;
                    cookTimeInputToSubmit.value = cookTimeValue;
                }
            }
            
            // Final verification
            const finalCookTimeCheck = form.querySelector('input[name="CookTime"]');
            console.log('=== FINAL VERIFICATION ===');
            console.log('CookTime input exists:', !!finalCookTimeCheck);
            console.log('CookTime input value:', finalCookTimeCheck ? finalCookTimeCheck.value : 'MISSING');
            
            // Ensure Level is in form
            let levelValue = levelInput ? levelInput.value : '';
            const existingLevelInput = form.querySelector('input[name="Level"]');
            if (!existingLevelInput) {
                const hiddenLevel = document.createElement('input');
                hiddenLevel.type = 'hidden';
                hiddenLevel.name = 'Level';
                hiddenLevel.value = levelValue;
                form.appendChild(hiddenLevel);
                console.log('Added hidden Level:', levelValue);
            } else if (levelInput && existingLevelInput.value !== levelInput.value) {
                existingLevelInput.value = levelInput.value;
                console.log('Updated Level value:', levelInput.value);
            }
            
            console.log('=== AFTER PREPARE ===');
            console.log('CookTime in form:', form.querySelector('input[name="CookTime"]')?.value);
            console.log('Level in form:', form.querySelector('input[name="Level"]')?.value);
            
            ingredientList.forEach((ingredient, index) => {
                const input = document.createElement('input');
                input.type = 'hidden';
                input.name = `Ingredients[${index}]`;
                input.value = ingredient;
                input.className = 'dynamic-hidden-input';
                form.appendChild(input);
            });
            
            categoryList.forEach((category, index) => {
                const input = document.createElement('input');
                input.type = 'hidden';
                input.name = `RecipeTypes[${index}]`;
                input.value = category;
                input.className = 'dynamic-hidden-input';
                form.appendChild(input);
            });
            
            Object.keys(stepMediaFiles).forEach(stepNumber => {
                const files = stepMediaFiles[stepNumber];
                if (files && files.length > 0) {
                    const input = document.querySelector(`input[data-step="${stepNumber}"]`);
                    if (input) {
                        const dataTransfer = new DataTransfer();
                        files.forEach(file => {
                            dataTransfer.items.add(file);
                        });
                        input.files = dataTransfer.files;
                    }
                }
            });
            
            if (!form.checkValidity()) {
                event.preventDefault();
                event.stopPropagation();
                form.classList.add('was-validated');
                return false;
            }
            
            const submitBtn = document.getElementById('submitBtn');
            submitBtn.disabled = true;
            submitBtn.querySelector('.btn-text').textContent = 'Đang cập nhật...';
            submitBtn.querySelector('.spinner-border').classList.remove('d-none');
            
            return true;
        }

        // Initialize autocomplete on page load
        document.addEventListener('DOMContentLoaded', function() {
            setupAutocomplete('ingredientInput', 'ingredientDropdown', mockIngredients, addIngredientTag);
            setupAutocomplete('categoryInput', 'categoryDropdown', mockCategories, addCategoryTag);
            
            // Render existing tags
            renderIngredientTags();
            renderCategoryTags();
            
            // Attach submit handler
            const form = document.getElementById('addRecipeForm');
            form.addEventListener('submit', function(e) {
                if (!prepareFormSubmit(e)) {
                    e.preventDefault();
                    return false;
                }
            });
        });
    </script>
}

