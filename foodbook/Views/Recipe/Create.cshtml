@{
    ViewData["Title"] = "Thêm công thức";
}

<form asp-action="Create" asp-controller="Recipe" method="post" enctype="multipart/form-data">
    <div class="row g-4">
        <div class="col-12 col-lg-8">
            <div class="card feed-card mb-3">
                <div class="card-body">
                    <div class="mb-3">
                        <label class="form-label">Tiêu đề công thức</label>
                        <input name="name" class="form-control" placeholder="Ví dụ: Gà sốt cam" required />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Ảnh bìa/Video</label>
                        <input type="file" name="thumbnail" accept="image/*" class="form-control" />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Mô tả nguyên liệu</label>
                        <textarea name="description" class="form-control" rows="4" placeholder="Mô tả ngắn..."></textarea>
                    </div>
                </div>
            </div>

            <div class="card feed-card">
                <div class="card-body">
                    <div class="d-flex align-items-center justify-content-between mb-3">
                        <h5 class="mb-0">Hướng dẫn từng bước</h5>
                        <button type="button" id="btnAddStep" class="btn btn-outline-success btn-sm"><i class="bi bi-plus"></i> Thêm bước</button>
                    </div>
                    <div id="stepsContainer"></div>
                </div>
            </div>
        </div>

        <div class="col-12 col-lg-4">
            <div class="card sidebar-card sticky-sidebar">
                <div class="card-body">
                    <div class="mb-3">
                        <div class="sidebar-section-title">Nguyên liệu</div>
                        <div id="ingredientTags" class="tag-input" data-suggest-url="@Url.Action("SuggestIngredients")"></div>
                        <input type="hidden" name="ingredientTags" />
                    </div>
                    <div class="mb-3">
                        <div class="sidebar-section-title">Phân loại</div>
                        <div id="typeTag" class="tag-input single" data-suggest-url="@Url.Action("SuggestTypes")"></div>
                        <input type="hidden" name="recipeType" />
                    </div>
                    <div class="mb-3">
                        <div class="sidebar-section-title">Thời gian nấu (phút)</div>
                        <input type="number" name="cookTime" min="0" class="form-control" />
                    </div>
                    <div class="mb-3">
                        <div class="sidebar-section-title">Độ khó</div>
                        <div class="d-flex gap-3">
                            <div class="form-check">
                                <input class="form-check-input" type="radio" name="level" value="dễ" id="lv1" checked>
                                <label class="form-check-label" for="lv1">Dễ</label>
                            </div>
                            <div class="form-check">
                                <input class="form-check-input" type="radio" name="level" value="trung bình" id="lv2">
                                <label class="form-check-label" for="lv2">Trung bình</label>
                            </div>
                            <div class="form-check">
                                <input class="form-check-input" type="radio" name="level" value="khó" id="lv3">
                                <label class="form-check-label" for="lv3">Khó</label>
                            </div>
                        </div>
                    </div>
                    <button type="submit" class="btn btn-success w-100">Lưu công thức</button>
                </div>
            </div>
        </div>
    </div>

    <template id="stepTemplate">
        <div class="card border-0 shadow-sm mb-3 step-item">
            <div class="card-body">
                <div class="d-flex justify-content-between align-items-center mb-2">
                    <div class="fw-semibold">Bước <span class="step-number"></span></div>
                    <button type="button" class="btn btn-outline-danger btn-sm btnRemoveStep">Xóa bước</button>
                </div>
                <input type="hidden" name="stepNumbers" />
                <div class="mb-2">
                    <label class="form-label">Mô tả</label>
                    <textarea name="stepInstructions" class="form-control" rows="2" placeholder="Mô tả bước..."></textarea>
                </div>
                <div>
                    <label class="form-label">Ảnh minh họa (tuỳ chọn)</label>
                    <input type="file" name="stepImages" accept="image/*" class="form-control" />
                </div>
            </div>
        </div>
    </template>
</form>

<style>
    .tag-input { border: 1px solid #E4E7EC; padding: 6px; border-radius: 8px; min-height: 42px; cursor: text; }
    .tag-pill { display:inline-flex; align-items:center; gap:6px; padding:4px 8px; background:#EEF2F6; border-radius: 999px; margin:4px; font-size: .9rem; }
    .tag-remove { cursor:pointer; }
    .suggest-box { position:relative; }
    .suggest-list { position:absolute; z-index:10; top:100%; left:0; right:0; background:#fff; border:1px solid #E4E7EC; border-radius:8px; max-height:200px; overflow:auto; }
    .suggest-item { padding:8px 10px; cursor:pointer; }
    .suggest-item:hover { background:#F2F4F7; }
</style>

<script>
    (function () {
        // Simple Tag Input with remote suggestions
        function setupTagInput(el, hiddenName, single) {
            const suggestUrl = el.dataset.suggestUrl;
            const input = document.createElement('input');
            input.type = 'text';
            input.className = 'border-0 outline-0 w-100';
            input.style.minWidth = '120px';
            el.classList.add('suggest-box');
            el.appendChild(input);
            const list = document.createElement('div');
            list.className = 'suggest-list d-none';
            el.appendChild(list);

            function values() { return Array.from(el.querySelectorAll('.tag-pill span')).map(s => s.textContent); }
            function renderHidden() {
                const form = el.closest('form');
                const hidden = form.querySelector(`input[name="${hiddenName}"]`);
                if (single) hidden.value = values()[0] || '';
                else hidden.value = values().join(',');
            }

            function addTag(text) {
                if (!text) return;
                if (single) el.querySelectorAll('.tag-pill').forEach(p => p.remove());
                const pill = document.createElement('span');
                pill.className = 'tag-pill';
                pill.innerHTML = `<span>${text}</span><i class="bi bi-x tag-remove"></i>`;
                el.insertBefore(pill, input);
                input.value = '';
                renderHidden();
            }

            el.addEventListener('click', () => input.focus());
            el.addEventListener('keydown', (e) => {
                if (['Enter', ','].includes(e.key)) {
                    e.preventDefault();
                    addTag(input.value.trim());
                }
                renderHidden();
            });
            el.addEventListener('input', async () => {
                const q = input.value.trim();
                if (q.length < 2) { list.classList.add('d-none'); return; }
                const res = await fetch(`${suggestUrl}?query=${encodeURIComponent(q)}`);
                const data = await res.json();
                list.innerHTML = data.map(x => `<div class="suggest-item">${x}</div>`).join('');
                list.classList.remove('d-none');
            });
            list.addEventListener('click', (e) => {
                if (e.target.classList.contains('suggest-item')) {
                    addTag(e.target.textContent.trim());
                    list.classList.add('d-none');
                }
            });
            el.addEventListener('click', (e) => {
                if (e.target.classList.contains('tag-remove')) {
                    e.target.closest('.tag-pill').remove();
                    renderHidden();
                }
            });
        }

        // Steps dynamic
        function setupSteps() {
            const container = document.getElementById('stepsContainer');
            const btnAdd = document.getElementById('btnAddStep');
            const tpl = document.getElementById('stepTemplate');
            function renumber() {
                const items = container.querySelectorAll('.step-item');
                items.forEach((item, idx) => {
                    item.querySelector('.step-number').textContent = idx + 1;
                    item.querySelector('input[name="stepNumbers"]').value = (idx + 1);
                });
            }
            btnAdd.addEventListener('click', () => {
                const node = tpl.content.cloneNode(true);
                container.appendChild(node);
                renumber();
            });
            container.addEventListener('click', (e) => {
                if (e.target.classList.contains('btnRemoveStep')) {
                    e.target.closest('.step-item').remove();
                    renumber();
                }
            });
            // add default first step
            btnAdd.click();
        }

        document.addEventListener('DOMContentLoaded', function () {
            setupTagInput(document.getElementById('ingredientTags'), 'ingredientTags', false);
            setupTagInput(document.getElementById('typeTag'), 'recipeType', true);
            setupSteps();
        });
    })();
</script>


