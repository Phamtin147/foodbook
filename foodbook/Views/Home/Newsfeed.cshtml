@model List<foodbook.Models.NewfeedViewModel>

@{
    ViewData["Title"] = "Newsfeed";
}

@Html.AntiForgeryToken()

<div class="container mt-4 newsfeed-container">
    <div class="row row-cols-1 row-cols-md-2 g-4 newsfeed-grid">
        @if (Model != null && Model.Any())
        {
            foreach (var recipe in Model)
            {
                <div class="col">
                    <div class="card h-100 shadow-sm border-0 rounded-4 overflow-hidden feed-card">

                        <!-- Phần đầu: Avatar + tên + nút theo dõi -->
                        <div class="feed-card-header text-center p-3 pb-0">
                            <div class="user-inline-center">
                                <a asp-controller="Profile" asp-action="Info" asp-route-id="@recipe.UserId" class="text-decoration-none text-dark">
                                    <img src="@recipe.UserAvatarUrl"
                                         onerror="this.onerror=null;this.src='https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png';"
                                         alt="avatar"
                                         class="rounded-circle user-avatar user-avatar-ring"
                                         width="40" height="40"
                                         style="object-fit: cover;">
                                    <div class="fw-semibold user-name">@recipe.UserName</div>
                                </a>
                            </div>
                            @if (recipe.UserId != 0 && !recipe.IsOwnPost)
                            {
                                <button class="btn @(recipe.IsFollowing ? "btn-outline-secondary" : "btn-success") rounded-pill px-3 mt-2 follow-btn follow-btn-sm" 
                                        data-user-id="@recipe.UserId" 
                                        data-is-following="@recipe.IsFollowing.ToString().ToLower()">
                                    <i class="bi bi-person-plus"></i> @(recipe.IsFollowing ? "Following" : "Follow")
                                </button>
                            }
                        </div>

                        <!-- Bọc ảnh + nội dung bằng link -->
                        <a asp-controller="Recipe"
                           asp-action="Detail"
                           asp-route-id="@recipe.RecipeId"
                           class="text-decoration-none text-dark feed-link">

                            <!-- Ảnh món ăn -->
                            <div class="thumb mt-2">
                                @if (!string.IsNullOrEmpty(recipe.ThumbnailImg))
                                {
                                    <img src="@recipe.ThumbnailImg"
                                         alt="@recipe.RecipeName">
                                }
                                else
                                {
                                    <img src="https://via.placeholder.com/600x400?text=No+Image"
                                         alt="No Image">
                                }
                            </div>

                    <!-- Nội dung -->
                    <div class="card-body feed-card-body">
                        <h5 class="card-title fw-bold mb-2 feed-title">@recipe.RecipeName</h5>
                        <div class="tag-container mb-3" data-recipe-id="@recipe.RecipeId">
                            <div class="tag-list tag-collapsed">
                                @if (recipe.Tags != null && recipe.Tags.Any())
                                {
                                @foreach (var tag in recipe.Tags.Take(3))
                                {
                                    <span class="tag-chip tag-clickable" onclick="event.stopPropagation(); event.preventDefault(); searchByTagSmart('@tag')">@tag</span>
                                }
                                }
                                else
                                {
                                    <span class="tag-chip tag-clickable" onclick="event.stopPropagation(); event.preventDefault(); searchByDifficulty('@recipe.Level')">@recipe.Level</span>
                                }
                            </div>
                            @if (recipe.Tags != null && recipe.Tags.Count > 3)
                            {
                                <button class="tag-show-more-btn" onclick="event.stopPropagation(); event.preventDefault(); showTagsPopup(@recipe.RecipeId, '@string.Join("|", recipe.Tags)')">
                                    +@(recipe.Tags.Count - 3)
                                </button>
                            }
                        </div>
                    </div>
                </a>

                            <!-- Các chỉ số tương tác -->
                            <div class="d-flex justify-content-between align-items-center border-top text-muted small feed-actions">
                                <div class="action"><i class="bi bi-hand-thumbs-up me-1"></i>@recipe.LikesCount</div>
                                <div class="action"><i class="bi bi-chat me-1"></i>@recipe.CommentsCount</div>
                                <div class="action"><i class="bi bi-share me-1"></i>@recipe.SharesCount</div>
                            </div>
                        </div>

                    </div>
                }
        }
        else
        {
            <div class="col-12 text-center">
                <p class="text-muted">Không có công thức nào để hiển thị.</p>
            </div>
        }
    </div>
    
    <!-- Load More Button -->
    <div class="text-center mt-4" id="load-more-container">
        <button id="load-more-btn" class="btn btn-outline-primary">
            <i class="bi bi-arrow-down-circle me-2"></i>Tải thêm
        </button>
    </div>
</div>

<!-- Tags Dropdown Popup -->
<div id="tagsDropdown" class="tags-dropdown-popup" style="display: none;">
    <div class="tags-dropdown-content">
        <div class="tags-dropdown-header">
            <span class="tags-dropdown-title">Tất cả phân loại</span>
            <button type="button" class="tags-dropdown-close" onclick="hideTagsPopup()">&times;</button>
        </div>
        <div id="tagsPopupContent" class="tags-dropdown-body">
            <!-- Tags sẽ được load vào đây -->
        </div>
    </div>
</div>

<!-- Bootstrap Icons (nếu chưa có) -->
<link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css" rel="stylesheet" />

<script>
function showTagsPopup(recipeId, tagsString) {
    // Parse tags từ string
    const tags = tagsString.split('|');
    
    // Tạo HTML cho tags với khả năng click - dùng searchByTagSmart để phân biệt ingredient vs recipe type
    const tagsHtml = tags.map(tag => 
        `<span class="tag-chip tag-clickable" onclick="searchByTagSmart('${tag}')">${tag}</span>`
    ).join('');
    
    // Load tags vào popup
    document.getElementById('tagsPopupContent').innerHTML = tagsHtml;
    
    // Tìm vị trí tag đầu tiên của recipe này
    const tagContainer = document.querySelector(`[data-recipe-id="${recipeId}"]`);
    const firstTag = tagContainer.querySelector('.tag-chip');
    
    if (firstTag) {
        const rect = firstTag.getBoundingClientRect();
        const dropdown = document.getElementById('tagsDropdown');
        
        // Kiểm tra nếu là mobile
        const isMobile = window.innerWidth <= 768;
        
        if (isMobile) {
            // Trên mobile, hiển thị dropdown ở giữa màn hình
            dropdown.style.position = 'fixed';
            dropdown.style.top = '50%';
            dropdown.style.left = '50%';
            dropdown.style.transform = 'translate(-50%, -50%)';
            dropdown.style.zIndex = '9999';
        } else {
            // Trên desktop, tính toán vị trí dropdown
            let topPosition = rect.bottom + 5;
            let leftPosition = rect.left;
            
            // Kiểm tra nếu dropdown vượt quá màn hình
            const dropdownWidth = 300; // max-width của dropdown
            const dropdownHeight = 200; // max-height của dropdown
            const viewportWidth = window.innerWidth;
            const viewportHeight = window.innerHeight;
            
            // Điều chỉnh vị trí ngang nếu cần
            if (leftPosition + dropdownWidth > viewportWidth) {
                leftPosition = viewportWidth - dropdownWidth - 10;
            }
            if (leftPosition < 10) {
                leftPosition = 10;
            }
            
            // Điều chỉnh vị trí dọc nếu cần
            if (topPosition + dropdownHeight > viewportHeight) {
                topPosition = rect.top - dropdownHeight - 5;
            }
            
            // Đặt vị trí dropdown
            dropdown.style.position = 'fixed';
            dropdown.style.top = topPosition + 'px';
            dropdown.style.left = leftPosition + 'px';
            dropdown.style.transform = 'none';
            dropdown.style.zIndex = '9999';
        }
        
        // Hiển thị dropdown
        dropdown.style.display = 'block';
    }
}

function hideTagsPopup() {
    document.getElementById('tagsDropdown').style.display = 'none';
}

// Đóng dropdown khi click outside
document.addEventListener('click', function(event) {
    const dropdown = document.getElementById('tagsDropdown');
    const isClickInside = dropdown.contains(event.target);
    const isTagButton = event.target.classList.contains('tag-show-more-btn');
    
    if (!isClickInside && !isTagButton) {
        hideTagsPopup();
    }
});

// Đóng dropdown khi scroll
window.addEventListener('scroll', function() {
    hideTagsPopup();
}, { passive: true });

function createRecipeCard(recipe) {
    const tagsHtml = recipe.tags.slice(0, 3).map(tag => `<span class="tag-chip tag-clickable" onclick="event.stopPropagation(); event.preventDefault(); searchByTagSmart('${tag}')">${tag}</span>`).join('');
    const showMoreBtn = recipe.tags.length > 3 ?
        `<button class="tag-show-more-btn" onclick="event.stopPropagation(); event.preventDefault(); showTagsPopup(${recipe.recipeId}, '${recipe.tags.join('|')}')">+${recipe.tags.length - 3}</button>` : '';

    const followButtonHtml = (recipe.userId !== 0 && !recipe.isOwnPost) ?
        `<button class="btn ${recipe.isFollowing ? 'btn-outline-secondary' : 'btn-success'} rounded-pill px-3 mt-2 follow-btn follow-btn-sm"
                 data-user-id="${recipe.userId}"
                 data-is-following="${recipe.isFollowing}">
            <i class="bi bi-person-plus"></i> ${recipe.isFollowing ? 'Following' : 'Follow'}
         </button>` : '';

    return `
        <div class="col">
            <div class="card h-100 shadow-sm border-0 rounded-4 overflow-hidden feed-card">
                <div class="feed-card-header text-center p-3 pb-0">
                    <div class="user-inline-center">
                        <a href="/Profile/Info/${recipe.userId}" class="text-decoration-none text-dark">
                            <img src="${recipe.userAvatarUrl || 'https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png'}"
                                 onerror="this.onerror=null;this.src='https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png';"
                                 alt="avatar"
                                 class="rounded-circle user-avatar user-avatar-ring"
                                 width="40" height="40"
                                 style="object-fit: cover;">
                            <div class="fw-semibold user-name">${recipe.userName}</div>
                        </a>
                    </div>
                    ${followButtonHtml}
                </div>
                
                <!-- Bọc ảnh + nội dung bằng link -->
                <a href="/Recipe/Detail/${recipe.recipeId}" class="text-decoration-none text-dark feed-link">
                    <!-- Ảnh món ăn -->
                    <div class="thumb mt-2">
                        <img src="${recipe.thumbnailImg || 'https://via.placeholder.com/600x400?text=No+Image'}" 
                             alt="${recipe.recipeName}">
                    </div>
                    
                    <!-- Nội dung -->
                    <div class="card-body feed-card-body">
                        <h5 class="card-title fw-bold mb-2 feed-title">${recipe.recipeName}</h5>
                        <div class="tag-container mb-3" data-recipe-id="${recipe.recipeId}">
                            <div class="tag-list tag-collapsed">
                                ${tagsHtml}
                            </div>
                            ${showMoreBtn}
                        </div>
                    </div>
                </a>
                
                <!-- Các chỉ số tương tác -->
                <div class="d-flex justify-content-between align-items-center border-top text-muted small feed-actions">
                    <div class="action"><i class="bi bi-hand-thumbs-up me-1"></i>${recipe.LikesCount || recipe.likesCount || 0}</div>
                    <div class="action"><i class="bi bi-chat me-1"></i>${recipe.CommentsCount || recipe.commentsCount || 0}</div>
                    <div class="action"><i class="bi bi-share me-1"></i>${recipe.SharesCount || recipe.sharesCount || 0}</div>
                </div>
            </div>
        </div>
    `;
}

// Load more recipes with button
let currentPage = 1;
let isLoading = false;
let hasMore = true;

// Initialize when page loads
document.addEventListener('DOMContentLoaded', function() {
    // Add event listener for load more button
    const loadMoreBtn = document.getElementById('load-more-btn');
    if (loadMoreBtn) {
        loadMoreBtn.addEventListener('click', loadMoreRecipes);
    }
});

function loadMoreRecipes() {
    if (isLoading || !hasMore) return;
    
    isLoading = true;
    currentPage++;
    
    console.log(`Loading page ${currentPage} for newsfeed...`);
    
    const loadMoreBtn = document.getElementById('load-more-btn');
    if (loadMoreBtn) {
        loadMoreBtn.innerHTML = '<i class="bi bi-hourglass-split me-2"></i>Đang tải...';
        loadMoreBtn.disabled = true;
    }
    
    fetch(`/Home/LoadMoreRecipes?page=${currentPage}&pageSize=4`)
        .then(response => response.json())
        .then(data => {
            console.log('LoadMoreRecipes response:', data);
            
            if (data.success && data.recipes.length > 0) {
                // Add new recipes to the grid
                const grid = document.querySelector('.newsfeed-grid');
                console.log('=== NEWSFEED DEBUG ===');
                console.log('Total recipes:', data.recipes.length);
                console.log('First recipe:', data.recipes[0]);
                console.log('First recipe LikesCount:', data.recipes[0]?.LikesCount);
                console.log('First recipe CommentsCount:', data.recipes[0]?.CommentsCount);
                console.log('First recipe SharesCount:', data.recipes[0]?.SharesCount);
                console.log('All properties:', Object.keys(data.recipes[0] || {}));
                
                // Check for different property names
                console.log('likesCount:', data.recipes[0]?.likesCount);
                console.log('commentsCount:', data.recipes[0]?.commentsCount);
                console.log('sharesCount:', data.recipes[0]?.sharesCount);
                console.log('=====================');
                
                data.recipes.forEach(recipe => {
                    const recipeHtml = createRecipeCard(recipe);
                    grid.insertAdjacentHTML('beforeend', recipeHtml);
                });
                
                hasMore = data.hasMore;
                console.log(`Loaded ${data.recipes.length} more recipes. HasMore: ${hasMore}`);
                
                // Check if no more data
                if (data.recipes.length < 4) {
                    const container = document.getElementById('load-more-container');
                    if (container) {
                        container.innerHTML = '<p class="text-muted">Đã hiển thị tất cả công thức!</p>';
                    }
                } else if (loadMoreBtn) {
                    loadMoreBtn.innerHTML = '<i class="bi bi-arrow-down-circle me-2"></i>Tải thêm';
                    loadMoreBtn.disabled = false;
                }
            } else {
                hasMore = false;
                console.log('No more recipes to load');
                const container = document.getElementById('load-more-container');
                if (container) {
                    container.innerHTML = '<p class="text-muted">Đã hiển thị tất cả công thức!</p>';
                }
            }
        })
        .catch(error => {
            console.error('Error loading more recipes:', error);
            currentPage--; // Rollback page number
            if (loadMoreBtn) {
                loadMoreBtn.innerHTML = '<i class="bi bi-arrow-down-circle me-2"></i>Tải thêm';
                loadMoreBtn.disabled = false;
            }
        })
        .finally(() => {
            isLoading = false;
        });
}

// Follow button functionality
document.addEventListener('click', function(event) {
    if (event.target.classList.contains('follow-btn')) {
        event.preventDefault();
        event.stopPropagation();
        
        const button = event.target;
        const userId = button.getAttribute('data-user-id');
        const isFollowing = button.getAttribute('data-is-following') === 'true';
        
        if (!userId) return;
        
        // Toggle follow status
        const newFollowStatus = !isFollowing;
        
        // Update button appearance immediately
        if (newFollowStatus) {
            button.classList.remove('btn-success');
            button.classList.add('btn-outline-secondary');
            button.innerHTML = '<i class="bi bi-person-plus"></i> Following';
            button.setAttribute('data-is-following', 'true');
        } else {
            button.classList.remove('btn-outline-secondary');
            button.classList.add('btn-success');
            button.innerHTML = '<i class="bi bi-person-plus"></i> Follow';
            button.setAttribute('data-is-following', 'false');
        }
        
        // Send request to server
        const token = document.querySelector('input[name="__RequestVerificationToken"]')?.value || '';
        const formData = new FormData();
        formData.append('userId', userId);
        formData.append('isFollowing', newFollowStatus);
        formData.append('__RequestVerificationToken', token);
        
        fetch('/Home/ToggleFollow', {
            method: 'POST',
            body: formData
        })
        .then(response => response.json())
        .then(data => {
            if (!data.success) {
                // Revert button state if request failed
                if (isFollowing) {
                    button.classList.remove('btn-success');
                    button.classList.add('btn-outline-secondary');
                    button.innerHTML = '<i class="bi bi-person-plus"></i> Following';
                    button.setAttribute('data-is-following', 'true');
                } else {
                    button.classList.remove('btn-outline-secondary');
                    button.classList.add('btn-success');
                    button.innerHTML = '<i class="bi bi-person-plus"></i> Follow';
                    button.setAttribute('data-is-following', 'false');
                }
                alert('Có lỗi xảy ra: ' + (data.message || 'Không thể thực hiện thao tác'));
            }
        })
        .catch(error => {
            console.error('Error:', error);
            // Revert button state if request failed
            if (isFollowing) {
                button.classList.remove('btn-success');
                button.classList.add('btn-outline-secondary');
                button.innerHTML = '<i class="bi bi-person-plus"></i> Following';
                button.setAttribute('data-is-following', 'true');
            } else {
                button.classList.remove('btn-outline-secondary');
                button.classList.add('btn-success');
                button.innerHTML = '<i class="bi bi-person-plus"></i> Follow';
                button.setAttribute('data-is-following', 'false');
            }
            alert('Có lỗi xảy ra khi thực hiện thao tác');
        });
    }
});

// Scroll event listener
window.addEventListener('scroll', function() {
    if (window.innerHeight + window.scrollY >= document.body.offsetHeight - 1000) {
        loadMoreRecipes();
    }
});

// Navigate to search page with tag filter
function searchByTag(tag) {
    // Encode tag để tránh lỗi với ký tự đặc biệt
    const encodedTag = encodeURIComponent(tag);
    // Chuyển đến trang search với tag
    window.location.href = `/Search/Search?type=${encodedTag}`;
}

// Navigate to search page with difficulty filter
function searchByDifficulty(difficulty) {
    // Encode difficulty để tránh lỗi với ký tự đặc biệt
    const encodedDifficulty = encodeURIComponent(difficulty);
    // Chuyển đến trang search với difficulty
    window.location.href = `/Search/Search?difficulty=${encodedDifficulty}`;
}

// Smart tag search - phân biệt độ khó, nguyên liệu và phân loại
function searchByTagSmart(tag) {
    const difficulties = ['dễ', 'bình thường', 'khó', 'Dễ', 'Bình thường', 'Khó', 'DỄ', 'BÌNH THƯỜNG', 'KHÓ'];
    
    if (difficulties.includes(tag)) {
        // Độ khó
        searchByDifficulty(tag);
    } else if (tag.startsWith('#')) {
        // Recipe type (có #)
        searchByTag(tag.substring(1));
    } else {
        // Nguyên liệu (không có #)
        window.location.href = `/Search/Search?ingredient=${encodeURIComponent(tag)}`;
    }
}
</script>
