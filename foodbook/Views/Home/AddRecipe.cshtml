@model AddRecipeViewModel
@{
    ViewData["Title"] = "Thêm công thức mới";
}

<!-- Hiển thị thông báo lỗi/thành công -->
@if (TempData["Success"] != null)
{
    <div class="alert alert-success alert-dismissible fade show" role="alert">
        <i class="bi bi-check-circle-fill me-2"></i>
        @TempData["Success"]
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    </div>
}

@if (TempData["Error"] != null)
{
    <div class="alert alert-danger alert-dismissible fade show" role="alert">
        <i class="bi bi-exclamation-triangle-fill me-2"></i>
        <strong>Lỗi:</strong> @TempData["Error"]
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    </div>
}

@if (!ViewData.ModelState.IsValid)
{
    <div class="alert alert-warning alert-dismissible fade show" role="alert">
        <i class="bi bi-exclamation-circle-fill me-2"></i>
        <strong>Validation Errors:</strong>
        <ul class="mb-0 mt-2">
            @foreach (var error in ViewData.ModelState.Values.SelectMany(v => v.Errors))
            {
                <li>@error.ErrorMessage</li>
            }
        </ul>
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    </div>
}

<div class="add-recipe-container">
    <div class="row">
        <!-- Left Column - Main Form -->
        <div class="col-lg-8">
            <form asp-action="AddRecipe" method="post" enctype="multipart/form-data" id="addRecipeForm">
                <div class="recipe-section">
                    <h3 class="section-title">Tên công thức</h3>
                    <input type="text" 
                           class="form-control recipe-name-input" 
                           asp-for="Name" 
                           placeholder="VD: Cơm chiên">
                    <span asp-validation-for="Name" class="text-danger"></span>
                </div>

                <div class="recipe-section">
                    <h3 class="section-title">Ảnh chính</h3>
                    <div class="upload-area" id="mainMediaUpload" onclick="document.getElementById('mainMediaInput').click()">
                        <input type="file" 
                               asp-for="MainMedia" 
                               class="d-none" 
                               id="mainMediaInput"
                               accept="image/*,video/*">
                        <div class="upload-placeholder" id="mainMediaPlaceholder">
                            <i class="bi bi-camera fs-1 text-muted"></i>
                            <p class="text-muted mt-3">Nhấn để thêm ảnh hoặc video</p>
                        </div>
                    </div>
                </div>

                <div class="recipe-section">
                    <h3 class="section-title">Mô tả nguyên liệu</h3>
                    <textarea class="form-control recipe-textarea" 
                              asp-for="Description" 
                              rows="6"
                              placeholder="VD: 500g Ức gà không xương không da&#10;3 muỗng canh Mật ong&#10;2 muỗng canh Nước cốt chanh&#10;1 muỗng canh Dầu ô liu"></textarea>
                </div>

                <div class="recipe-section">
                    <h3 class="section-title">Hướng dẫn từng bước</h3>
                    <div id="stepsContainer">
                        <!-- Step 1 -->
                        <div class="step-item" data-step="1">
                            <div class="step-header" data-bs-toggle="collapse" data-bs-target="#step1">
                                <span class="step-label">Bước 1:</span>
                                <i class="bi bi-chevron-down"></i>
                            </div>
                            <div class="collapse show" id="step1">
                                <div class="step-content">
                                    <label class="form-label">Mô tả bước</label>
                                    <textarea class="form-control mb-3" 
                                              name="Steps[0].Instruction" 
                                              rows="3"
                                              placeholder="Nhập mô tả chi tiết cho bước này..."></textarea>
                                    
                                    <label class="form-label">Ảnh/Video minh họa (có thể chọn nhiều)</label>
                                    <div class="step-media-container">
                                        <input type="file" 
                                               name="Steps[0].StepMedia" 
                                               class="d-none step-media-input"
                                               accept="image/*,video/*"
                                               multiple
                                               data-step="0">
                                        <div class="step-media-upload-btn" onclick="this.previousElementSibling.click()">
                                            <i class="bi bi-plus-circle"></i>
                                            <span>Thêm ảnh/video</span>
                                        </div>
                                        <div class="step-media-grid" id="mediaGrid0"></div>
                                    </div>
                                    
                                    <button type="button" class="btn btn-delete-step" onclick="deleteStep(1)">
                                        <i class="bi bi-x"></i> Xóa bước
                                    </button>
                                </div>
                            </div>
                        </div>

                        <!-- Step 2 -->
                        <div class="step-item" data-step="2">
                            <div class="step-header collapsed" data-bs-toggle="collapse" data-bs-target="#step2">
                                <span class="step-label">Bước 2:</span>
                                <i class="bi bi-chevron-down"></i>
                            </div>
                            <div class="collapse" id="step2">
                                <div class="step-content">
                                    <label class="form-label">Mô tả bước</label>
                                    <textarea class="form-control mb-3" 
                                              name="Steps[1].Instruction" 
                                              rows="3"
                                              placeholder="Nhập mô tả chi tiết cho bước này..."></textarea>
                                    
                                    <label class="form-label">Ảnh/Video minh họa (có thể chọn nhiều)</label>
                                    <div class="step-media-container">
                                        <input type="file" 
                                               name="Steps[1].StepMedia" 
                                               class="d-none step-media-input"
                                               accept="image/*,video/*"
                                               multiple
                                               data-step="1">
                                        <div class="step-media-upload-btn" onclick="this.previousElementSibling.click()">
                                            <i class="bi bi-plus-circle"></i>
                                            <span>Thêm ảnh/video</span>
                                        </div>
                                        <div class="step-media-grid" id="mediaGrid1"></div>
                                    </div>
                                    
                                    <button type="button" class="btn btn-delete-step" onclick="deleteStep(2)">
                                        <i class="bi bi-x"></i> Xóa bước
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>

                    <button type="button" class="btn btn-add-step" onclick="addStep()">
                        <i class="bi bi-plus-circle"></i> Thêm bước
                    </button>
                </div>

                <div class="recipe-section">
                    <button type="submit" class="btn btn-save-recipe" id="submitBtn">
                        <span class="btn-text">Lưu công thức</span>
                        <span class="spinner-border spinner-border-sm d-none" role="status"></span>
                    </button>
                </div>
            </form>
        </div>

        <!-- Right Column - Sidebar Info -->
        <div class="col-lg-4">
            <div class="recipe-sidebar">
                <!-- Nguyên liệu -->
                <div class="recipe-info-section">
                    <h5 class="recipe-info-title">Nguyên liệu</h5>
                    <p class="recipe-info-subtitle">Thêm nguyên liệu/từ vực gắn 50</p>
                    
                    <div class="input-with-add-btn">
                        <input type="text" 
                               class="form-control autocomplete-input" 
                               id="ingredientInput"
                               placeholder="Nhập nguyên liệu...">
                        <button type="button" class="btn btn-add-circle" onclick="addIngredientTag()">
                            <i class="bi bi-plus-circle"></i>
                        </button>
                    </div>
                    
                    <div class="autocomplete-dropdown" id="ingredientDropdown"></div>
                    
                    <div class="tags-container mt-3" id="ingredientTags"></div>
                </div>

                <!-- Phân loại -->
                <div class="recipe-info-section">
                    <h5 class="recipe-info-title">Phân Loại</h5>
                    <p class="recipe-info-subtitle">Thêm phân loại (VD: Việt nam)</p>
                    
                    <div class="input-with-add-btn">
                        <input type="text" 
                               class="form-control autocomplete-input" 
                               id="categoryInput"
                               placeholder="Nhập phân loại...">
                        <button type="button" class="btn btn-add-circle" onclick="addCategoryTag()">
                            <i class="bi bi-plus-circle"></i>
                        </button>
                    </div>
                    
                    <div class="autocomplete-dropdown" id="categoryDropdown"></div>
                    
                    <div class="tags-container mt-3" id="categoryTags"></div>
                </div>

                <!-- Thời gian nấu -->
                <div class="recipe-info-section">
                    <h5 class="recipe-info-title">Thời gian nấu</h5>
                    <div class="time-input-group">
                        <i class="bi bi-clock"></i>
                        <input type="number" 
                               class="form-control time-input" 
                               asp-for="CookTime" 
                               value="30"
                               min="1"
                               max="1440"
                               required>
                        <span class="time-unit">phút</span>
                    </div>
                    <span asp-validation-for="CookTime" class="text-danger small"></span>
                </div>

                <!-- Độ khó -->
                <div class="recipe-info-section">
                    <h5 class="recipe-info-title">Độ khó</h5>
                    <div class="difficulty-buttons">
                        <button type="button" 
                                class="btn btn-difficulty active" 
                                data-level="dễ"
                                onclick="selectDifficulty(this, 'dễ')">
                            Dễ
                        </button>
                        <button type="button" 
                                class="btn btn-difficulty" 
                                data-level="bình thường"
                                onclick="selectDifficulty(this, 'bình thường')">
                            Bình thường
                        </button>
                        <button type="button" 
                                class="btn btn-difficulty" 
                                data-level="khó"
                                onclick="selectDifficulty(this, 'khó')">
                            Khó
                        </button>
                    </div>
                    <input type="hidden" asp-for="Level" id="levelInput" value="dễ">
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <script>
        // Mock data - trong thực tế sẽ fetch từ API
        const mockIngredients = [
            'Gà', 'Thịt bò', 'Thịt heo', 'Cá hồi', 'Cá ngừ', 'Tôm', 'Mực',
            'Cơm', 'Mì', 'Phở', 'Bún', 'Miến', 'Bánh mì',
            'Trứng', 'Sữa', 'Phô mai', 'Bơ', 'Dầu ô liu',
            'Cà chua', 'Dưa chuột', 'Hành tây', 'Tỏi', 'Gừng',
            'Mật ong', 'Đường', 'Muối', 'Tiêu', 'Nước mắm'
        ];

        const mockCategories = [
            'Việt Nam', 'Trung Quốc', 'Nhật Bản', 'Hàn Quốc', 'Thái Lan',
            'Món chay', 'Món mặn', 'Món khai vị', 'Món chính', 'Món tráng miệng',
            'Món ăn sáng', 'Món ăn trưa', 'Món ăn tối', 'Món ăn vặt',
            'Lẩu', 'Nướng', 'Xào', 'Chiên', 'Hấp', 'Luộc'
        ];

        let ingredientList = [];
        let categoryList = [];

        function setupAutocomplete(inputId, dropdownId, dataSource, onSelect) {
            const input = document.getElementById(inputId);
            const dropdown = document.getElementById(dropdownId);

            input.addEventListener('input', function() {
                const value = this.value.toLowerCase().trim();
                dropdown.innerHTML = '';

                if (value.length === 0) {
                    dropdown.style.display = 'none';
                    return;
                }

                const filtered = dataSource.filter(item => 
                    item.toLowerCase().includes(value)
                );

                if (filtered.length > 0) {
                    dropdown.style.display = 'block';
                    filtered.slice(0, 5).forEach(item => {
                        const div = document.createElement('div');
                        div.className = 'autocomplete-item';
                        div.textContent = item;
                        div.onclick = function() {
                            onSelect(item);
                            input.value = '';
                            dropdown.style.display = 'none';
                        };
                        dropdown.appendChild(div);
                    });
                } else {
                    dropdown.style.display = 'none';
                }
            });

            // Close dropdown when clicking outside
            document.addEventListener('click', function(e) {
                if (!input.contains(e.target) && !dropdown.contains(e.target)) {
                    dropdown.style.display = 'none';
                }
            });

            // Enter key to add
            input.addEventListener('keypress', function(e) {
                if (e.key === 'Enter') {
                    e.preventDefault();
                    if (this.value.trim()) {
                        if (inputId === 'ingredientInput') {
                            addIngredientTag();
                        } else {
                            addCategoryTag();
                        }
                    }
                }
            });
        }

        function addIngredientTag() {
            const input = document.getElementById('ingredientInput');
            const value = input.value.trim();
            
            if (!value) return;
            
            if (!ingredientList.includes(value)) {
                ingredientList.push(value);
                const container = document.getElementById('ingredientTags');
                const tag = document.createElement('span');
                tag.className = 'recipe-tag';
                tag.innerHTML = `${value} <button type="button" onclick="removeIngredientTag(this, '${value}')">×</button>`;
                container.appendChild(tag);
                
                // Nếu không có trong mock data, add vào (giả lập add vào DB)
                if (!mockIngredients.includes(value)) {
                    mockIngredients.push(value);
                    console.log('Đã thêm nguyên liệu mới vào DB:', value);
                }
            }
            
            input.value = '';
            document.getElementById('ingredientDropdown').style.display = 'none';
        }

        function addCategoryTag() {
            const input = document.getElementById('categoryInput');
            const value = input.value.trim();
            
            if (!value) return;
            
            if (!categoryList.includes(value)) {
                categoryList.push(value);
                const container = document.getElementById('categoryTags');
                const tag = document.createElement('span');
                tag.className = 'recipe-tag';
                tag.innerHTML = `${value} <button type="button" onclick="removeCategoryTag(this, '${value}')">×</button>`;
                container.appendChild(tag);
                
                // Nếu không có trong mock data, add vào (giả lập add vào DB)
                if (!mockCategories.includes(value)) {
                    mockCategories.push(value);
                    console.log('Đã thêm phân loại mới vào DB:', value);
                }
            }
            
            input.value = '';
            document.getElementById('categoryDropdown').style.display = 'none';
        }

        function removeIngredientTag(btn, value) {
            ingredientList = ingredientList.filter(item => item !== value);
            btn.parentElement.remove();
        }

        function removeCategoryTag(btn, value) {
            categoryList = categoryList.filter(item => item !== value);
            btn.parentElement.remove();
        }

        function addStep() {
            const stepsContainer = document.getElementById('stepsContainer');
            
            // Đếm số bước hiện có thay vì dùng stepCount
            const currentSteps = stepsContainer.querySelectorAll('.step-item');
            const newStepNumber = currentSteps.length + 1;
            const newStepIndex = currentSteps.length; // 0-based index for form
            
            const stepHtml = `
                <div class="step-item" data-step="${newStepNumber}">
                    <div class="step-header collapsed" data-bs-toggle="collapse" data-bs-target="#step${newStepNumber}">
                        <span class="step-label">Bước ${newStepNumber}:</span>
                        <i class="bi bi-chevron-down"></i>
                    </div>
                    <div class="collapse" id="step${newStepNumber}">
                        <div class="step-content">
                            <label class="form-label">Mô tả bước</label>
                            <textarea class="form-control mb-3" 
                                      name="Steps[${newStepIndex}].Instruction" 
                                      rows="3"
                                      placeholder="Nhập mô tả chi tiết cho bước này..."></textarea>
                            
                            <label class="form-label">Ảnh/Video minh họa (có thể chọn nhiều)</label>
                            <div class="step-media-container">
                                <input type="file" 
                                       name="Steps[${newStepIndex}].StepMedia" 
                                       class="d-none step-media-input"
                                       accept="image/*,video/*"
                                       multiple
                                       data-step="${newStepIndex}">
                                <div class="step-media-upload-btn" onclick="this.previousElementSibling.click()">
                                    <i class="bi bi-plus-circle"></i>
                                    <span>Thêm ảnh/video</span>
                                </div>
                                <div class="step-media-grid" id="mediaGrid${newStepIndex}"></div>
                            </div>
                            
                            <button type="button" class="btn btn-delete-step" onclick="deleteStep(${newStepNumber})">
                                <i class="bi bi-x"></i> Xóa bước
                            </button>
                        </div>
                    </div>
                </div>
            `;
            stepsContainer.insertAdjacentHTML('beforeend', stepHtml);
        }

        function deleteStep(stepNum) {
            const stepItem = document.querySelector(`[data-step="${stepNum}"]`);
            if (stepItem) {
                // Xóa step và media files liên quan
                const stepIndex = stepNum - 1;
                if (stepMediaFiles[stepIndex]) {
                    delete stepMediaFiles[stepIndex];
                }
                
                stepItem.remove();
                
                // Reindex lại tất cả các steps
                reindexSteps();
            }
        }

        function reindexSteps() {
            const stepsContainer = document.getElementById('stepsContainer');
            const stepItems = stepsContainer.querySelectorAll('.step-item');
            
            // Tạo object mới cho stepMediaFiles
            const newStepMediaFiles = {};
            
            stepItems.forEach((stepItem, index) => {
                const newStepNumber = index + 1;
                const newStepIndex = index;
                
                // Update data-step attribute
                stepItem.setAttribute('data-step', newStepNumber);
                
                // Update step header
                const stepLabel = stepItem.querySelector('.step-label');
                if (stepLabel) {
                    stepLabel.textContent = `Bước ${newStepNumber}:`;
                }
                
                // Update collapse target and id
                const stepHeader = stepItem.querySelector('.step-header');
                const collapseDiv = stepItem.querySelector('.collapse');
                if (stepHeader && collapseDiv) {
                    stepHeader.setAttribute('data-bs-target', `#step${newStepNumber}`);
                    collapseDiv.setAttribute('id', `step${newStepNumber}`);
                }
                
                // Update form input names
                const textarea = stepItem.querySelector('textarea');
                if (textarea) {
                    textarea.setAttribute('name', `Steps[${newStepIndex}].Instruction`);
                }
                
                const fileInput = stepItem.querySelector('.step-media-input');
                if (fileInput) {
                    fileInput.setAttribute('name', `Steps[${newStepIndex}].StepMedia`);
                    const oldStepIndex = fileInput.getAttribute('data-step');
                    fileInput.setAttribute('data-step', newStepIndex);
                    
                    // Di chuyển media files sang index mới
                    if (stepMediaFiles[oldStepIndex]) {
                        newStepMediaFiles[newStepIndex] = stepMediaFiles[oldStepIndex];
                    }
                }
                
                // Update media grid id
                const mediaGrid = stepItem.querySelector('.step-media-grid');
                if (mediaGrid) {
                    mediaGrid.setAttribute('id', `mediaGrid${newStepIndex}`);
                }
                
                // Update delete button
                const deleteBtn = stepItem.querySelector('.btn-delete-step');
                if (deleteBtn) {
                    deleteBtn.setAttribute('onclick', `deleteStep(${newStepNumber})`);
                }
            });
            
            // Cập nhật stepMediaFiles với index mới
            stepMediaFiles = newStepMediaFiles;
            
            // Re-render media grids với index mới
            Object.keys(stepMediaFiles).forEach(stepIndex => {
                renderMediaGrid(parseInt(stepIndex));
            });
            
            console.log('Steps reindexed, total steps:', stepItems.length);
        }

        function selectDifficulty(btn, level) {
            document.querySelectorAll('.btn-difficulty').forEach(b => b.classList.remove('active'));
            btn.classList.add('active');
            document.getElementById('levelInput').value = level;
        }

        // Object lưu files cho mỗi step
        let stepMediaFiles = {};

        // Image preview handlers
        document.getElementById('mainMediaInput')?.addEventListener('change', function(e) {
            const file = e.target.files[0];
            if (file) {
                const reader = new FileReader();
                const placeholder = document.getElementById('mainMediaPlaceholder');
                reader.onload = function(e) {
                    if (file.type.startsWith('image/')) {
                        placeholder.innerHTML = `<img src="${e.target.result}" alt="Preview" class="upload-preview-img">`;
                    } else if (file.type.startsWith('video/')) {
                        placeholder.innerHTML = `<video src="${e.target.result}" class="upload-preview-img" controls></video>`;
                    }
                };
                reader.readAsDataURL(file);
            }
        });

        // Xử lý upload nhiều media cho steps
        document.addEventListener('change', function(e) {
            if (e.target.classList.contains('step-media-input')) {
                const input = e.target;
                const stepIndex = input.getAttribute('data-step');
                const files = Array.from(input.files);
                
                if (files.length > 0) {
                    // Khởi tạo array nếu chưa có
                    if (!stepMediaFiles[stepIndex]) {
                        stepMediaFiles[stepIndex] = [];
                    }
                    
                    // Thêm files mới vào
                    stepMediaFiles[stepIndex] = stepMediaFiles[stepIndex].concat(files);
                    
                    // Render grid
                    renderMediaGrid(stepIndex);
                }
            }
        });

        function renderMediaGrid(stepIndex) {
            const gridContainer = document.getElementById(`mediaGrid${stepIndex}`);
            if (!gridContainer) {
                console.warn(`Media grid container not found for step ${stepIndex}`);
                return;
            }
            
            const files = stepMediaFiles[stepIndex] || [];
            gridContainer.innerHTML = '';
            
            files.forEach((file, index) => {
                const reader = new FileReader();
                reader.onload = function(e) {
                    const mediaItem = document.createElement('div');
                    mediaItem.className = 'step-media-item';
                    
                    let mediaContent = '';
                    if (file.type.startsWith('image/')) {
                        mediaContent = `<img src="${e.target.result}" alt="Media ${index + 1}">`;
                    } else if (file.type.startsWith('video/')) {
                        mediaContent = `
                            <video src="${e.target.result}"></video>
                            <div class="video-overlay"><i class="bi bi-play-circle"></i></div>
                        `;
                    }
                    
                    mediaItem.innerHTML = `
                        ${mediaContent}
                        <button type="button" class="btn-remove-media" onclick="removeMediaFile(${stepIndex}, ${index})">
                            <i class="bi bi-x"></i>
                        </button>
                        <div class="media-order">${index + 1}</div>
                    `;
                    
                    gridContainer.appendChild(mediaItem);
                };
                reader.readAsDataURL(file);
            });
        }

        function removeMediaFile(stepIndex, fileIndex) {
            if (stepMediaFiles[stepIndex]) {
                stepMediaFiles[stepIndex].splice(fileIndex, 1);
                renderMediaGrid(stepIndex);
            }
        }

        // Chuẩn bị form trước khi submit
        function prepareFormSubmit(event) {
            console.log('=== PREPARING FORM SUBMIT ===');
            const form = document.getElementById('addRecipeForm');
            
            // Xóa các hidden input cũ (nếu có)
            form.querySelectorAll('.dynamic-hidden-input').forEach(el => el.remove());
            
            // Thêm ingredients vào form
            console.log('Ingredients:', ingredientList);
            ingredientList.forEach((ingredient, index) => {
                const input = document.createElement('input');
                input.type = 'hidden';
                input.name = `Ingredients[${index}]`;
                input.value = ingredient;
                input.className = 'dynamic-hidden-input';
                form.appendChild(input);
            });
            
            // Thêm categories vào form
            console.log('Categories:', categoryList);
            categoryList.forEach((category, index) => {
                const input = document.createElement('input');
                input.type = 'hidden';
                input.name = `RecipeTypes[${index}]`;
                input.value = category;
                input.className = 'dynamic-hidden-input';
                form.appendChild(input);
            });
            
            // Gán files từ stepMediaFiles vào các input tương ứng
            console.log('Step Media Files:', stepMediaFiles);
            Object.keys(stepMediaFiles).forEach(stepIndex => {
                const files = stepMediaFiles[stepIndex];
                if (files && files.length > 0) {
                    console.log(`Step ${stepIndex}: ${files.length} files`);
                    const input = document.querySelector(`input[data-step="${stepIndex}"]`);
                    if (input) {
                        // Tạo DataTransfer để set files cho input
                        const dataTransfer = new DataTransfer();
                        files.forEach(file => {
                            console.log(`  - ${file.name} (${file.size} bytes)`);
                            dataTransfer.items.add(file);
                        });
                        input.files = dataTransfer.files;
                    } else {
                        console.error(`Input not found for step ${stepIndex}`);
                    }
                }
            });
            
            // Log form data
            const formData = new FormData(form);
            console.log('=== FORM DATA ===');
            for (let [key, value] of formData.entries()) {
                if (value instanceof File) {
                    console.log(`${key}: [File] ${value.name} (${value.size} bytes)`);
                } else {
                    console.log(`${key}: ${value}`);
                }
            }
            
            // Kiểm tra validation
            if (!form.checkValidity()) {
                console.error('Form validation failed!');
                event.preventDefault();
                event.stopPropagation();
                form.classList.add('was-validated');
                return false;
            }
            
            // Show loading
            const submitBtn = document.getElementById('submitBtn');
            submitBtn.disabled = true;
            submitBtn.querySelector('.btn-text').textContent = 'Đang lưu...';
            submitBtn.querySelector('.spinner-border').classList.remove('d-none');
            
            console.log('Form is valid, submitting...');
            return true;
        }

        // Initialize autocomplete on page load
        document.addEventListener('DOMContentLoaded', function() {
            setupAutocomplete('ingredientInput', 'ingredientDropdown', mockIngredients, addIngredientTag);
            setupAutocomplete('categoryInput', 'categoryDropdown', mockCategories, addCategoryTag);
            
            // Attach submit handler
            const form = document.getElementById('addRecipeForm');
            form.addEventListener('submit', function(e) {
                console.log('Form submit event triggered');
                if (!prepareFormSubmit(e)) {
                    e.preventDefault();
                    return false;
                }
            });
        });
    </script>
}


